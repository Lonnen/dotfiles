{"mode":"editor","version":1,"windowDimensions":{"x":958,"y":22,"width":958,"height":1178},"syntax":{"deserializer":"Syntax","grammarOverridesByPath":{}},"project":{"path":"/Users/lonnen/workspace/play","buffers":[{"text":"#!/bin/bash\n#\n# Bootstraps your world. Checks to see if dependencies are met, and then\n# installs them if they aren't.\n\necho ''\necho '' > /tmp/play-bootstrap\n\n# Set db vars.\n[ $MYSQL_USER ] && db_user=$MYSQL_USER || db_user='root'\n[ $MYSQL_PASSWORD ] && db_password=$MYSQL_PASSWORD || db_password=''\n\n\ninfo () {\n  printf \"  [ \\033[00;34m..\\033[0m ] $1\"\n}\n\nsuccess () {\n  printf \"\\r\\033[2K  [ \\033[00;32mok\\033[0m ] $1\\n\"\n}\n\nuser () {\n  printf \"\\r\\033[2K  [ \\033[00;33m?\\033[0m ] $1\"\n}\n\nfail () {\n  printf \"\\r\\033[2K  [\\033[0;31mFAIL\\033[0m] $1\\n\"\n  echo ''\n  echo 'See /tmp/play-bootstrap for more information.'\n  exit\n}\n\ninfo 'configure play'\nif test -f \"config/play.yml\"\nthen\n  success 'play config loaded'\nelse\n  user \"Are you going to use Play within a GitHub organization? (y,n) › \"\n  read -n 1 use_gh_org\n\n  if [ \"$use_gh_org\" == \"y\" ]\n  then\n    user \"What's your GitHub organization name? › \"\n    read gh_org\n  fi\n\n  echo \"\"\n  echo \"\"\n  echo \"    You need to set up an OAuth application on GitHub. Go here:\"\n  echo \"\"\n\n  if [ -z \"$gh_org\" ]\n  then\n    echo \"    https://github.com/settings/applications/new\"\n  else\n    echo \"    https://github.com/organizations/$gh_org/settings/applications/new\"\n  fi\n\n  echo \"\"\n  echo \"    and set up your application. Unless you're using a different\"\n  echo \"    hostname, you'll want to use values that look like:\"\n  echo \"\"\n  echo \"      Main URL:     http://localhost:3030\"\n  echo \"      Callback URL: http://localhost:3030/auth/github/callback\"\n  echo \"\"\n\n  user \"What is your GitHub client ID? › \"\n  read client_id\n  user \"What is your GitHub client secret? › \"\n  read secret\n\n  # Generate an auth token\n  if test $(which md5)\n  then\n    auth_token=$(date | md5)\n  else\n    auth_token=$(date | md5sum)\n  fi\n\n  # Write out play.yml\n  socket=$BOXEN_MYSQL_SOCKET\n  if ruby -r yaml -e \"\n    hash = YAML.load_file('config/play.yml.example')\n    hash['db']['username'] = '$db_user'\n    hash['db']['password'] = '$db_password'\n    hash['db']['socket'] = '$socket' == '' ? '/tmp/mysql.sock' : '$socket'\n    hash['auth_token'] = '$auth_token'\n    hash['github']['org'] = '$gh_org'\n    hash['github']['client_id'] = '$client_id'\n    hash['github']['secret'] = '$secret'\n    File.open('config/play.yml', 'w') {|f| f.write(hash.to_yaml) }\n  \" >> /tmp/play-bootstrap\n  then\n    success 'play config loaded'\n  else\n    fail 'configuring play'\n  fi\nfi\n\ninfo 'configure mpd'\nif test -f \"config/mpd.conf\"\nthen\n  success 'mpd config loaded'\nelse\n  user \"What is the full, absolute path to your music? › \"\n  read path\n\n  # Write out mpd.conf\n  config_file=$(cat config/mpd.conf.example)\n  if printf \"music_directory \\\"%s\\\"\\n\\n%s\" \"$path\" \"$config_file\" > config/mpd.conf 2> /tmp/play-bootstrap\n  then\n    success 'mpd config loaded'\n  else\n    fail 'configuring mpd'\n  fi\nfi\n\ninfo 'mpd directories'\nmkdir -p ~/.mpd\nsuccess 'mpd directories'\n\n# ruby\nRUBY_VERSION=`cat .ruby-version`\nRUBY_NO_DASH=`echo $RUBY_VERSION | sed 's/[-]//'`\nif [[ $(ruby -v 2>&1) == *$RUBY_NO_DASH* ]]\nthen\n  success 'ruby installed'\nelse\n  # Install if on rbenv\n  if test $(which rbenv)\n  then\n    info \"installing ruby\"\n    rbenv install \"$RUBY_VERSION\" > /tmp/play-bootstrap 2>&1\n    success 'ruby installed'\n  else\n    fail \"$RUBY_VERSION not installed\"\n  fi\nfi\n\n# bundler\ninfo 'bundler'\nif gem list | grep bundler > /dev/null\nthen\n  success 'bundler'\nelse\n  gem install bundler > /tmp/play-bootstrap\n  success 'bundler'\nfi\n\n\n# Rehash shims on rbenv if they're using it.\nif test $(which rbenv)\nthen\n  rbenv rehash\nfi\n\n# Install our system dependencies.\nif [ $(uname -s) = \"Darwin\" ]\nthen\n  . script/setup.osx\nelif [ $(uname -s) = \"Linux\" ]\nthen\n  . script/setup.apt\nelse\n  fail 'platform not supported'\nfi\n\n# gems\ninfo 'gems'\nif bundle install --binstubs --path vendor/gems >> /tmp/play-bootstrap 2>&1\nthen\n  success 'gems'\nelse\n  fail 'gems'\nfi\n\n# Create database. Assume root user and blank password. If this doesn't work,\n# tell them to do it manually.\ninfo 'setting up mysql'\n\nif mysql -u $db_user --password=\"$db_password\" -e 'USE play' >> /tmp/play-bootstrap 2>&1\nthen\n  success 'mysql database ready'\nelse\n  if mysql -u $db_user --password=\"$db_password\" -e 'CREATE DATABASE IF NOT EXISTS play CHARACTER SET utf8 COLLATE utf8_unicode_ci;' >> /tmp/play-bootstrap 2>&1\n  then\n    success 'created mysql database'\n  else\n    echo \"We assume MySQL credentials of root and a blank password. If that's not the case, run script/bootstrap with MYSQL_USER and MYSQL_PASSWORD environment variables set.\" >> /tmp/play-bootstrap\n    fail 'could not create mysql database'\n  fi\nfi\n\ninfo 'data migrations'\nif bundle exec rake db:migrate >> /tmp/play-bootstrap 2>&1\nthen\n  success 'data migrated'\nelse\n  fail 'problem migrating data'\nfi\n\ninfo 'asset compliation'\nif bundle exec rake assets:precompile >> /tmp/play-bootstrap 2>&1\nthen\n  success 'assets compiled'\nelse\n  fail 'problem compiling assets'\nfi\n\ninfo 'starting music server'\nscript/music start\nsuccess 'music server up'\n\ninfo 'caching album art'\nif script/cache-art >> /tmp/play-bootstrap 2>&1\nthen\n  success 'album art cached'\nelse\n  fail 'problem caching album art'\nfi\n\necho \"\"\necho \"  You're all set!\"\n","markers":{"markers":{"1":{"id":1,"range":[[152,4],[152,4]],"tailed":false,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{"type":"selection","editorId":29,"goalBufferRange":null,"autoscroll":true},"deserializer":"Marker"}},"deserializer":"MarkerManager"},"history":{"undoStack":[],"redoStack":[],"deserializer":"History"},"filePath":"/Users/lonnen/workspace/play/script/bootstrap","modifiedWhenLastPersisted":false,"digestWhenLastPersisted":"e7b43fc90eeea44134c3d0864bd9b875798dbd51","deserializer":"TextBuffer"}],"deserializer":"Project"},"workspace":{"paneContainer":{"root":{"items":[{"id":29,"softTabs":true,"displayBuffer":{"id":30,"softWrap":true,"editorWidthInChars":102,"scrollTop":1635,"scrollLeft":0,"tokenizedBuffer":{"bufferPath":"/Users/lonnen/workspace/play/script/bootstrap","tabLength":2,"deserializer":"TokenizedBuffer"},"deserializer":"DisplayBuffer"},"deserializer":"Editor"}],"activeItemUri":"/Users/lonnen/workspace/play/script/bootstrap","focused":true,"active":true,"deserializer":"Pane"},"deserializer":"PaneContainer"},"fullScreen":false,"deserializer":"Workspace"},"packageStates":{"command-logger":{"eventLog":{"find-and-replace:show":{"count":1,"name":"find-and-replace:show","lastRun":1400630727020}}},"find-and-replace":{"viewState":{"findHistory":["which ruby","bundlr","bundler"],"replaceHistory":[],"modelState":{"useRegex":false,"inCurrentSelection":false,"caseSensitive":false}}},"fuzzy-finder":{"/Users/lonnen/workspace/play/script/bootstrap":1400630726332},"keybinding-resolver":{"attached":false},"metrics":{"sessionLength":3844601},"tree-view":{"directoryExpansionStates":{},"selectedPath":"/Users/lonnen/workspace/play/script","hasFocus":false,"attached":true,"scrollLeft":0,"scrollTop":0,"width":200}}}