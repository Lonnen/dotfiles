{"mode":"editor","version":1,"windowDimensions":{"x":0,"y":22,"width":958,"height":1178,"maximized":false},"grammars":{"deserializer":"GrammarRegistry","grammarOverridesByPath":{}},"project":{"paths":["/Users/lonnen/repos/webrtc-collector"],"buffers":[{"text":"# This Source Code Form is subject to the terms of the Mozilla Public\n# License, v. 2.0. If a copy of the MPL was not distributed with this\n# file, You can obtain one at http://mozilla.org/MPL/2.0/.\n\nimport web\nimport time\n\nfrom socorro.lib.ooid import createNewOoid\nfrom socorro.lib.util import DotDict\nfrom collector.throttler import DISCARD, IGNORE\nfrom socorro.lib.datetimeutil import utc_now\n\nfrom configman import RequiredConfig, Namespace, class_converter\n\n\n#==============================================================================\nclass Collector(RequiredConfig):\n    #--------------------------------------------------------------------------\n    # in this section, define any configuration requirements\n    required_config = Namespace()\n    required_config.add_option(\n        'dump_field',\n        doc='the name of the form field containing the raw dump',\n        default='upload_file_minidump'\n    )\n    required_config.add_option(\n        'dump_id_prefix',\n        doc='the prefix to return to the client in front of the OOID',\n        default='bp-'\n    )\n    required_config.add_option(\n        'accept_submitted_crash_id',\n        doc='a boolean telling the collector to use a crash_id provided in '\n            'the crash submission',\n        default=False\n    )\n    required_config.add_option(\n        'accept_submitted_legacy_processing',\n        doc='a boolean telling the collector to use a any legacy_processing'\n            'flag submitted with the crash',\n        default=False\n    )\n    required_config.add_option(\n        'checksum_method',\n        doc='a reference to method that accepts a string and calculates a'\n            'hash value',\n        default='hashlib.md5',\n        from_string_converter=class_converter\n    )\n\n    #--------------------------------------------------------------------------\n    def __init__(self, config):\n        self.config = config\n        self.logger = self.config.logger\n        self.throttler = config.throttler\n        self.dump_id_prefix = config.collector.dump_id_prefix\n        self.crash_storage = config.crash_storage\n        self.dump_field = config.collector.dump_field\n\n    #--------------------------------------------------------------------------\n    uri = '/submit'\n    #--------------------------------------------------------------------------\n\n    #--------------------------------------------------------------------------\n    def _make_raw_crash_and_dumps(self, form):\n        dumps = DotDict()\n        raw_crash = DotDict()\n        raw_crash.dump_checksums = DotDict()\n        for name, value in form.iteritems():\n            if isinstance(value, basestring):\n                raw_crash[name] = value\n            elif hasattr(value, 'file') and hasattr(value, 'value'):\n                dumps[name] = value.value\n                raw_crash.dump_checksums[name] = \\\n                    self.config.collector.checksum_method(\n                        value.value\n                    ).hexdigest()\n            elif isinstance(value, int):\n                raw_crash[name] = value\n            else:\n                raw_crash[name] = value.value\n        return raw_crash, dumps\n\n    #--------------------------------------------------------------------------\n    def POST(self, *args):\n        raw_crash, dumps = \\\n            self._make_raw_crash_and_dumps(web.webapi.rawinput())\n\n        current_timestamp = utc_now()\n        raw_crash.submitted_timestamp = current_timestamp.isoformat()\n        # legacy - ought to be removed someday\n        raw_crash.timestamp = time.time()\n\n        if (not self.config.collector.accept_submitted_crash_id\n            or 'uuid' not in raw_crash\n        ):\n            crash_id = createNewOoid(current_timestamp)\n            raw_crash.uuid = crash_id\n            self.logger.info('%s received', crash_id)\n        else:\n            crash_id = raw_crash.uuid\n            self.logger.info('%s received with existing crash_id:', crash_id)\n\n        if ('legacy_processing' not in raw_crash\n            or not self.config.collector.accept_submitted_legacy_processing\n        ):\n            raw_crash.legacy_processing, raw_crash.throttle_rate = (\n                self.throttler.throttle(raw_crash)\n            )\n        else:\n            raw_crash.legacy_processing = int(raw_crash.legacy_processing)\n\n        if raw_crash.legacy_processing == DISCARD:\n            self.logger.info('%s discarded', crash_id)\n            return \"Discarded=1\\n\"\n        if raw_crash.legacy_processing == IGNORE:\n            self.logger.info('%s ignored', crash_id)\n            return \"Unsupported=1\\n\"\n\n        self.config.crash_storage.save_raw_crash(\n          raw_crash,\n          dumps,\n          crash_id\n        )\n        self.logger.info('%s accepted', crash_id)\n        return \"ID=%s%s\\n\" % (self.dump_id_prefix, crash_id)\n","markerStore":{"version":2,"nextMarkerId":122,"markersById":{"0":{"range":{"start":{"row":49,"column":0},"end":{"row":49,"column":0}},"properties":{"type":"selection","editorId":84,"goalScreenRange":null,"clip":"forward","preserveFolds":true},"reversed":true,"tailed":false,"valid":true,"invalidate":"never"},"118":{"range":{"start":{"row":16,"column":0},"end":{"row":16,"column":32}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"119":{"range":{"start":{"row":125,"column":0},"end":{"row":125,"column":60}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"}}},"history":{"version":2,"nextCheckpointId":26,"undoStack":[],"redoStack":[]},"encoding":"utf8","filePath":"/Users/lonnen/repos/webrtc-collector/collector/wsgi_collector.py","modifiedWhenLastPersisted":false,"digestWhenLastPersisted":"46332d78f7d2712d08e8cf1bba09270cbf32de3c","deserializer":"TextBuffer","version":2},{"text":"Socorro Collector\n-----------------\n\nA WSGI server for collecting multi-part HTTP form posts, and storing to\na number of different backends (S3, PostgreSQL, ElasticSearch, HBase, RabbitMQ,\nfilesystem - or any combination of these)\n\nCollector requires the ProductName and Version fields to be set. For example,\nto start the Collector using a Procfile runner (foreman or honcho should work)\nand submit a crash:\n\n    export PORT=8888\n    honcho start web\n    curl -F 'ProductName=Blah' -F 'Version=1.0' 'http://localhost:8888/submit'\n\nYou can specify any other form fields you like. A \"CrashID\" should be returned,\nand you can find your data in the `./crashes/` directory.\n\nThis project is used by the Socorro crash collecting project for collecting\ncrash reports from clients using the [Breakpad libraries](http://code.google.com/p/google-breakpad/), but can be used to retrieve any payload.\n\nDocumentation:\nhttp://socorro.readthedocs.org\n\nSource code:\nhttps://github.com/mozilla/socorro\nhttps://github.com/rhelmer/socorro-collector\n\nReleases:\nhttps://github.com/mozilla/socorro/releases\n\nInstallation instructions:\nhttp://socorro.readthedocs.org/en/latest\n\nSocorro mailing list:\nhttps://lists.mozilla.org/listinfo/tools-socorro\n\nSocorro/Breakpad IRC channel:\nirc://irc.mozilla.org/breakpad\n","markerStore":{"version":2,"nextMarkerId":14,"markersById":{"0":{"range":{"start":{"row":16,"column":57},"end":{"row":16,"column":57}},"properties":{"type":"selection","editorId":132,"autoscroll":true,"goalScreenRange":null,"preserveFolds":true},"reversed":false,"tailed":false,"valid":true,"invalidate":"never"}}},"history":{"version":2,"nextCheckpointId":1,"undoStack":[],"redoStack":[]},"encoding":"utf8","filePath":"/Users/lonnen/repos/webrtc-collector/README.md","modifiedWhenLastPersisted":false,"digestWhenLastPersisted":"d8b3fbd19de45950fb4fa209b7a73b183e30eac5","deserializer":"TextBuffer","version":2}],"deserializer":"Project"},"workspace":{"paneContainer":{"root":{"id":3,"items":[{"id":84,"softTabs":true,"displayBuffer":{"id":85,"softWrapped":true,"editorWidthInChars":null,"scrollTop":0,"scrollLeft":0,"tokenizedBuffer":{"bufferPath":"/Users/lonnen/repos/webrtc-collector/collector/wsgi_collector.py","deserializer":"TokenizedBuffer"},"deserializer":"DisplayBuffer"},"deserializer":"TextEditor"},{"id":132,"softTabs":true,"displayBuffer":{"id":133,"softWrapped":true,"editorWidthInChars":null,"scrollTop":0,"scrollLeft":0,"tokenizedBuffer":{"bufferPath":"/Users/lonnen/repos/webrtc-collector/README.md","deserializer":"TokenizedBuffer"},"deserializer":"DisplayBuffer"},"deserializer":"TextEditor"}],"activeItemURI":"/Users/lonnen/repos/webrtc-collector/README.md","focused":false,"flexScale":1,"deserializer":"Pane"},"activePaneId":3,"deserializer":"PaneContainer","version":1},"fullScreen":false,"packagesWithActiveGrammars":["language-python","language-gfm","language-hyperlink","language-todo"],"deserializer":"Workspace"},"packageStates":{"command-logger":{"eventLog":{"editor:display-updated":{"count":3452,"name":"editor:display-updated","lastRun":1433781862882},"pane:item-added":{"count":35,"name":"pane:item-added","lastRun":1433518012342},"pane-container:active-pane-item-changed":{"count":80,"name":"pane-container:active-pane-item-changed","lastRun":1433518016785},"editor:attached":{"count":28,"name":"editor:attached","lastRun":1433518012479},"pane:active-item-changed":{"count":76,"name":"pane:active-item-changed","lastRun":1433518016798},"cursor:moved":{"count":208,"name":"cursor:moved","lastRun":1433274694033},"selection:changed":{"count":203,"name":"selection:changed","lastRun":1433274694034},"core:close":{"count":58,"name":"core:close","lastRun":1433348296710},"pane:before-item-destroyed":{"count":32,"name":"pane:before-item-destroyed","lastRun":1433518016784},"editor:detached":{"count":78,"name":"editor:detached","lastRun":1433518016811},"editor:will-be-removed":{"count":78,"name":"editor:will-be-removed","lastRun":1433518016812},"pane:item-removed":{"count":32,"name":"pane:item-removed","lastRun":1433518016802},"core:move-down":{"count":34,"name":"core:move-down","lastRun":1432933655185},"core:move-up":{"count":4,"name":"core:move-up","lastRun":1432923956092},"pane:show-next-item":{"count":10,"name":"pane:show-next-item","lastRun":1432933893009},"editor:move-to-first-character-of-line":{"count":2,"name":"editor:move-to-first-character-of-line","lastRun":1432923964876},"core:backspace":{"count":96,"name":"core:backspace","lastRun":1432944132345},"pane:active-item-modified-status-changed":{"count":17,"name":"pane:active-item-modified-status-changed","lastRun":1433274692501},"core:undo":{"count":18,"name":"core:undo","lastRun":1432933894934},"pane:show-previous-item":{"count":4,"name":"pane:show-previous-item","lastRun":1432926191790},"deprecation-cop:view":{"count":1,"name":"deprecation-cop:view","lastRun":1432933553777},"find-and-replace:show":{"count":18,"name":"find-and-replace:show","lastRun":1432933855469},"core:select-all":{"count":2,"name":"core:select-all","lastRun":1432933597921},"core:confirm":{"count":64,"name":"core:confirm","lastRun":1432944118307},"find-and-replace:show-previous":{"count":14,"name":"find-and-replace:show-previous","lastRun":1432933804335},"snippets:next-tab-stop":{"count":1,"name":"snippets:next-tab-stop","lastRun":1432933647261},"snippets:expand":{"count":1,"name":"snippets:expand","lastRun":1432933647262},"editor:indent":{"count":2,"name":"editor:indent","lastRun":1432933647275},"core:move-right":{"count":4,"name":"core:move-right","lastRun":1432933789557},"core:move-left":{"count":2,"name":"core:move-left","lastRun":1432933655485},"core:save":{"count":6,"name":"core:save","lastRun":1432933896462},"project-find:show":{"count":16,"name":"project-find:show","lastRun":1432944130162},"core:redo":{"count":8,"name":"core:redo","lastRun":1432933895985},"tree-view:move":{"count":3,"name":"tree-view:move","lastRun":1432933946423},"pane:active-item-title-changed":{"count":1,"name":"pane:active-item-title-changed","lastRun":1432933931861},"settings-view:check-for-package-updates":{"count":2,"name":"settings-view:check-for-package-updates","lastRun":1433287754432},"window:update-available":{"count":13,"name":"window:update-available","lastRun":1433741083242},"application:new-file":{"count":4,"name":"application:new-file","lastRun":1433348295680},"application:new-window":{"count":4,"name":"application:new-window","lastRun":1433442336142}}},"find-and-replace":{"viewState":"","modelState":{"useRegex":false,"inCurrentSelection":false,"caseSensitive":false,"wholeWord":false},"projectViewState":"","resultsModelState":{"useRegex":false,"caseSensitive":false},"findHistory":["storage","crash_storage","dump_field","save_raw_","save_raw","socorro","BreakpadCollector","wsgi_breakpad_collector","./crashes"],"replaceHistory":["Collector","wsgi_collector"],"pathsHistory":["Collector","wsgi_collector"]},"fuzzy-finder":{"/Users/lonnen/repos/webrtc-collector/collector/wsgi_collector.py":1432933920484,"/Users/lonnen/repos/webrtc-collector/README.md":1433518016798},"keybinding-resolver":{},"metrics":{"sessionLength":512470109},"tree-view":{"directoryExpansionStates":{"/Users/lonnen/repos/webrtc-collector":{"isExpanded":true,"entries":{".git":{"isExpanded":false,"entries":{}},"collector":{"isExpanded":true,"entries":{}},"tests":{"isExpanded":true,"entries":{}}}}},"selectedPath":"/Users/lonnen/repos/webrtc-collector/README.md","hasFocus":false,"attached":true,"scrollLeft":14,"scrollTop":0,"width":200}}}