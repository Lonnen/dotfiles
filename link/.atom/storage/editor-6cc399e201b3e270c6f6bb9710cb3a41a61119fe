{"mode":"editor","version":"0.73.0","windowDimensions":{"x":446,"y":22,"width":1024,"height":1178},"syntax":{"deserializer":"Syntax","grammarOverridesByPath":{}},"project":{"path":"/Users/lonnen/repos/marvin","buffers":[{"text":"# Description:\n#   Allows Hubot to know many languages.\n#\n# Commands:\n#   hubot translate me <phrase> - Searches for a translation for the <phrase> and then prints that bad boy out.\n#   hubot translate me from <source> into <target> <phrase> - Translates <phrase> from <source> into <target>. Both <source> and <target> are optional\n\nlanguages =\n  \"af\": \"Afrikaans\",\n  \"sq\": \"Albanian\",\n  \"ar\": \"Arabic\",\n  \"az\": \"Azerbaijani\",\n  \"eu\": \"Basque\",\n  \"bn\": \"Bengali\",\n  \"be\": \"Belarusian\",\n  \"bg\": \"Bulgarian\",\n  \"ca\": \"Catalan\",\n  \"zh-CN\": \"Simplified Chinese\",\n  \"zh-TW\": \"Traditional Chinese\",\n  \"hr\": \"Croatian\",\n  \"cs\": \"Czech\",\n  \"da\": \"Danish\",\n  \"nl\": \"Dutch\",\n  \"en\": \"English\",\n  \"eo\": \"Esperanto\",\n  \"et\": \"Estonian\",\n  \"tl\": \"Filipino\",\n  \"fi\": \"Finnish\",\n  \"fr\": \"French\",\n  \"gl\": \"Galician\",\n  \"ka\": \"Georgian\",\n  \"de\": \"German\",\n  \"el\": \"Greek\",\n  \"gu\": \"Gujarati\",\n  \"ht\": \"Haitian Creole\",\n  \"iw\": \"Hebrew\",\n  \"hi\": \"Hindi\",\n  \"hu\": \"Hungarian\",\n  \"is\": \"Icelandic\",\n  \"id\": \"Indonesian\",\n  \"ga\": \"Irish\",\n  \"it\": \"Italian\",\n  \"ja\": \"Japanese\",\n  \"kn\": \"Kannada\",\n  \"ko\": \"Korean\",\n  \"la\": \"Latin\",\n  \"lv\": \"Latvian\",\n  \"lt\": \"Lithuanian\",\n  \"mk\": \"Macedonian\",\n  \"ms\": \"Malay\",\n  \"mt\": \"Maltese\",\n  \"no\": \"Norwegian\",\n  \"fa\": \"Persian\",\n  \"pl\": \"Polish\",\n  \"pt\": \"Portuguese\",\n  \"ro\": \"Romanian\",\n  \"ru\": \"Russian\",\n  \"sr\": \"Serbian\",\n  \"sk\": \"Slovak\",\n  \"sl\": \"Slovenian\",\n  \"es\": \"Spanish\",\n  \"sw\": \"Swahili\",\n  \"sv\": \"Swedish\",\n  \"ta\": \"Tamil\",\n  \"te\": \"Telugu\",\n  \"th\": \"Thai\",\n  \"tr\": \"Turkish\",\n  \"uk\": \"Ukrainian\",\n  \"ur\": \"Urdu\",\n  \"vi\": \"Vietnamese\",\n  \"cy\": \"Welsh\",\n  \"yi\": \"Yiddish\"\n\ngetCode = (language,languages) ->\n  for code, lang of languages\n      return code if lang.toLowerCase() is language.toLowerCase()\n\nmodule.exports = (robot) ->\n  language_choices = (language for _, language of languages).sort().join('|')\n  pattern = new RegExp('translate(?: me)?' +\n                       \"(?: from (#{language_choices}))?\" +\n                       \"(?: (?:in)?to (#{language_choices}))?\" +\n                       '(.*)', 'i')\n  robot.respond pattern, (msg) ->\n    term   = \"\\\"#{msg.match[3]}\\\"\"\n    origin = if msg.match[1] isnt undefined then getCode(msg.match[1], languages) else 'auto'\n    target = if msg.match[2] isnt undefined then getCode(msg.match[2], languages) else 'en'\n    \n    msg.http(\"https://translate.google.com/translate_a/t\")\n      .query({\n        client: 't'\n        hl: 'en'\n        multires: 1\n        sc: 1\n        sl: origin\n        ssel: 0\n        tl: target\n        tsel: 0\n        uptl: \"en\"\n        text: term\n      })\n      .header('User-Agent', 'Mozilla/5.0')\n      .get() (err, res, body) ->\n        data   = body\n        if data.length > 4 and data[0] == '['\n          parsed = eval(data)\n          language =languages[parsed[2]]\n          parsed = parsed[0] and parsed[0][0] and parsed[0][0][0]\n          if parsed\n            if msg.match[2] is undefined\n              msg.send \"#{term} is #{language} for #{parsed}\"\n            else\n              msg.send \"The #{language} #{term} translates as #{parsed} in #{languages[target]}\"\n\n","markers":{"markers":{"1":{"id":1,"range":[[0,0],[0,0]],"tailed":false,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{"type":"selection","editorId":37},"deserializer":"Marker"}},"deserializer":"MarkerManager"},"history":{"undoStack":[],"redoStack":[],"deserializer":"History"},"filePath":"/Users/lonnen/.Trash/translate.coffee","modifiedWhenLastPersisted":false,"digestWhenLastPersisted":"0c1b531c8c1f5c22330d33ff230ed8d9e6606c55","deserializer":"TextBuffer"},{"text":"# Description:\n#   Messing around with the YouTube API.\n#\n# Commands:\n#   hubot youtube me <query> - Searches YouTube for the query and returns the video embed link.\nmodule.exports = (robot) ->\n  robot.respond /(youtube|yt)( me)? (.*)/i, (msg) ->\n    query = msg.match[3]\n    robot.http(\"http://gdata.youtube.com/feeds/api/videos\")\n      .query({\n        orderBy: \"relevance\"\n        'max-results': 15\n        alt: 'json'\n        q: query\n      })\n      .get() (err, res, body) ->\n        videos = JSON.parse(body)\n        videos = videos.feed.entry\n\n        unless videos?\n          msg.send \"No video results for \\\"#{query}\\\"\"\n          return\n\n        video  = msg.random videos\n        video.link.forEach (link) ->\n          if link.rel is \"alternate\" and link.type is \"text/html\"\n            msg.send link.href\n\n","markers":{"markers":{"1":{"id":1,"range":[[0,0],[0,0]],"tailed":false,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{"type":"selection","editorId":39},"deserializer":"Marker"}},"deserializer":"MarkerManager"},"history":{"undoStack":[],"redoStack":[],"deserializer":"History"},"filePath":"/Users/lonnen/.Trash/youtube.coffee","modifiedWhenLastPersisted":false,"digestWhenLastPersisted":"0a341dee7b878203a88ba9334b9958a3d86ba77e","deserializer":"TextBuffer"},{"text":"# Description:\n#   Top that.\n#\n# Dependencies:\n#   None\n#\n# Configuration:\n#   None\n#\n# Commands:\n#   top that - TOP THAT!\n\nmodule.exports = (robot) ->\n\n  topThese = [\n    \"http://media.giphy.com/media/Z5Ns7jpdNqD04/giphy.gif\",\n    \"http://media.giphy.com/media/2vLKvKhQuD3eE/giphy.gif\",\n    \"http://media.giphy.com/media/wYipAUNUI2PpS/giphy.gif\",\n    \"http://media.giphy.com/media/Qhrh5BB78Z1qU/giphy.gif\",\n    \"http://media.giphy.com/media/12UUxHcN25DqqQ/giphy.gif\",\n    \"http://media.giphy.com/media/gPa9YSHtPnj4A/giphy.gif\",\n    \"http://i.imgur.com/S7QbwIa.gif\",\n    \"http://i.imgur.com/CVi00sP.gif\"\n  ]\n\n  robot.hear /(top that|teen witch)/i, (msg) ->\n    msg.send msg.random(topThese)\n","markers":{"markers":{"1":{"id":1,"range":[[0,0],[0,0]],"tailed":false,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{"type":"selection","editorId":41},"deserializer":"Marker"}},"deserializer":"MarkerManager"},"history":{"undoStack":[],"redoStack":[],"deserializer":"History"},"filePath":"/Users/lonnen/.Trash/top-that.coffee","modifiedWhenLastPersisted":false,"digestWhenLastPersisted":"91d6391a666129edfae0b24382f59f204dde841d","deserializer":"TextBuffer"}],"deserializer":"Project"},"workspace":{"paneContainer":{"root":{"items":[{"id":37,"softTabs":true,"scrollTop":0,"scrollLeft":0,"displayBuffer":{"id":38,"softWrap":true,"editorWidthInChars":111,"tokenizedBuffer":{"bufferPath":"/Users/lonnen/.Trash/translate.coffee","tabLength":2,"deserializer":"TokenizedBuffer"},"deserializer":"DisplayBuffer"},"deserializer":"Editor"},{"id":39,"softTabs":true,"scrollTop":0,"scrollLeft":0,"displayBuffer":{"id":40,"softWrap":true,"editorWidthInChars":112,"tokenizedBuffer":{"bufferPath":"/Users/lonnen/.Trash/youtube.coffee","tabLength":2,"deserializer":"TokenizedBuffer"},"deserializer":"DisplayBuffer"},"deserializer":"Editor"},{"id":41,"softTabs":true,"scrollTop":0,"scrollLeft":0,"displayBuffer":{"id":42,"softWrap":true,"editorWidthInChars":112,"tokenizedBuffer":{"bufferPath":"/Users/lonnen/.Trash/top-that.coffee","tabLength":2,"deserializer":"TokenizedBuffer"},"deserializer":"DisplayBuffer"},"deserializer":"Editor"}],"activeItemUri":"/Users/lonnen/.Trash/top-that.coffee","focused":true,"active":true,"deserializer":"Pane"},"deserializer":"PaneContainer"},"fullScreen":false,"deserializer":"Workspace"},"packageStates":{"command-logger":{"eventLog":{"core:close":{"count":2,"name":"core:close","lastRun":1398537465357},"tree-view:remove":{"count":4,"name":"tree-view:remove","lastRun":1398537504629},"core:move-up":{"count":4,"name":"core:move-up","lastRun":1398537491575},"core:move-down":{"count":3,"name":"core:move-down","lastRun":1398537492115},"core:undo":{"count":1,"name":"core:undo","lastRun":1398537509380}}},"fuzzy-finder":{"/Users/lonnen/.Trash/translate.coffee":1398537466859,"/Users/lonnen/.Trash/youtube.coffee":1398537467500,"/Users/lonnen/.Trash/top-that.coffee":1398537507042},"keybinding-resolver":{"attached":false},"metrics":{"sessionLength":38544989},"tree-view":{"directoryExpansionStates":{"scripts":{}},"selectedPath":"/Users/lonnen/repos/marvin","hasFocus":false,"attached":true,"scrollLeft":0,"scrollTop":0,"width":200}}}