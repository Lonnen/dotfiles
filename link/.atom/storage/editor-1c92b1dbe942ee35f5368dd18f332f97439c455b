{"mode":"editor","version":1,"windowDimensions":{"x":958,"y":22,"width":958,"height":1178,"maximized":false},"grammars":{"deserializer":"GrammarRegistry","grammarOverridesByPath":{}},"project":{"paths":["/Users/lonnen/repos/fhr-jelly"],"buffers":[{"text":"#!/usr/bin/env python\nimport glob\nimport os\nimport shutil\nimport sys\nimport codecs\nimport urllib2\nfrom optparse import OptionParser\n\nimport settings\n\n\n# Import vendor lib.\nsys.path.insert(0, os.path.join(os.path.dirname(os.path.abspath(__file__)),\n                                'vendor'))\nsys.path.insert(0, os.path.join(os.path.dirname(os.path.abspath(__file__)),\n                                'vendor', 'jinja2'))\n\n\nimport jinja2\n\nimport helpers\nfrom dotlang.translate import translate\n\n\nENV = jinja2.Environment(\n    loader=jinja2.FileSystemLoader([\n        os.path.join(settings.ROOT, 'templates')\n    ]), extensions=[])\n# Hook up template filters.\nhelpers.load_filters(ENV)\n\n\noptparser = OptionParser(usage='%prog --output-dir=/tmp/path/example')\noptparser.add_option(\"--output-dir\", action=\"store\", dest=\"output_path\",\n                     help=\"Specify the output directory\")\noptparser.add_option('-f', '--force', action='store_true', dest='force',\n                     default=False, help='Delete output dir if it exists.')\noptparser.add_option('--nowarn', action='store_false', dest='warn',\n                     default=True, help=(\"Don't warn if unknown L10n strings \"\n                                         \"are encountered\"))\noptparser.add_option('-v', '--version', action='store', dest='version',\n                    default=settings.BUILD_VERSION,\n                    help=\"Version to generate. Accepts 'passive' or 'urgent'\")\n\n(options, args) = optparser.parse_args()\n\nOUTPUT_PATH = (options.output_path if options.output_path else\n                os.path.join(settings.BUILD_ROOT, 'html'))\n\n\ndef copy_file(output_dir, fileName):\n    \"\"\"Helper function that copies a file to a new folder.\"\"\"\n    resource_path = os.path.split(settings.ROOT)[0]\n    shutil.copyfile(os.path.join(resource_path, fileName),\n                    os.path.join(output_dir, fileName))\n\n\ndef write_output(output_dir, filename, text):\n    \"\"\"Helper function that writes a string out to a file.\"\"\"\n    f = codecs.open(os.path.join(output_dir, filename), 'w', 'utf-8')\n    f.write(text)\n    f.close()\n\n\ndef main():\n    \"\"\"Function run when script is run from the command line.\"\"\"\n    templates = {\n        'html': 'index.html',\n        'mobile': 'mobile.html'\n    }\n\n    # allow parameter to override settings build version\n    if options.version not in ('passive', 'urgent'):\n        options.version = settings.BUILD_VERSION\n\n    if os.path.exists(OUTPUT_PATH):\n        if not options.force:\n            sys.stderr.write('Output path \"%s\" exists, please remove it or '\n                             'run with --force to overwrite automatically.\\n' % (\n                                 OUTPUT_PATH))\n            sys.exit(1)\n        else:\n            shutil.rmtree(OUTPUT_PATH)\n    os.makedirs(OUTPUT_PATH)\n\n    sys.stdout.write(\"Writing %s template to %s\\n\" % (options.version, OUTPUT_PATH))\n\n    # Copy \"root\" files into output dir's root.\n    for f in (glob.glob(os.path.join(settings.ROOT, 'root', '*')) +\n              glob.glob(os.path.join(settings.ROOT, 'root', '.*'))):\n        shutil.copy(f, OUTPUT_PATH)\n\n    # Place static files into output dir.\n    STATIC_PATH = os.path.join(OUTPUT_PATH, 'static')\n    MOBILE_STATIC_PATH = os.path.join(STATIC_PATH, 'mobile')\n    for folder in settings.STATIC_FOLDERS:\n        folder_path = os.path.join(STATIC_PATH, folder)\n        shutil.copytree(os.path.join(settings.ROOT, folder),\n                        folder_path)\n\n    for folder in settings.MOBILE_STATIC_FOLDERS:\n        mobile_folder_path = os.path.join(MOBILE_STATIC_PATH, folder)\n        shutil.copytree(os.path.join(settings.MOBILE_ROOT, folder),\n                        mobile_folder_path)\n\n    for lang in settings.LANGS:\n        # Make language dir, or symlink to fallback language\n        LANG_PATH = os.path.join(OUTPUT_PATH, lang)\n        MOBILE_LANG_PATH = os.path.join(LANG_PATH, 'mobile')\n        if lang in settings.LANG_FALLBACK:\n            os.symlink(settings.LANG_FALLBACK[lang], LANG_PATH)\n            continue\n        else:\n            os.makedirs(LANG_PATH)\n            if lang in settings.LANG_MOBILE_FALLBACK:\n                MOBILE_FALLBACK_PATH = os.path.join(\n                                        '..',\n                                        settings.LANG_MOBILE_FALLBACK[lang],\n                                        'mobile')\n                os.symlink(MOBILE_FALLBACK_PATH, MOBILE_LANG_PATH)\n            else:\n                os.makedirs(MOBILE_LANG_PATH)\n\n        # symlink desktop static folders into language dir\n        for folder in settings.STATIC_FOLDERS:\n            os.symlink(os.path.join(settings.STATIC_SYMLINK_PATH, folder),\n                       os.path.join(LANG_PATH, folder))\n\n        # symlink mobile static folders into language dir\n        if lang not in settings.LANG_MOBILE_FALLBACK:\n            for folder in settings.MOBILE_STATIC_FOLDERS:\n                os.symlink(os.path.join(settings.MOBILE_STATIC_SYMLINK_PATH, folder),\n                           os.path.join(LANG_PATH, 'mobile', folder))\n\n        # Data to be passed to template\n        data = {\n            'LANG': lang,\n            'DIR': 'rtl' if lang in settings.RTL_LANGS else 'ltr',\n            'VERSION': options.version,\n        }\n\n        # Load _() translation shortcut for jinja templates and point it to dotlang.\n        ENV.globals['_'] = lambda txt: translate(lang, txt, warn=options.warn)\n\n        for platform, template in templates.iteritems():\n            OUTPUT_LANG_PATH = (LANG_PATH if platform == 'html' else\n                                os.path.join(LANG_PATH, 'mobile'))\n            tmpl = ENV.get_template(template)\n\n            if platform =='mobile' and lang in settings.LANG_MOBILE_FALLBACK:\n                continue\n            write_output(OUTPUT_LANG_PATH, 'index.html', tmpl.render(data));\n\n\nif __name__ == '__main__':\n    main()\n","markers":{"markers":{"1":{"id":1,"range":[[0,0],[0,0]],"tailed":false,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{"type":"selection","editorId":4},"deserializer":"Marker"}},"deserializer":"MarkerManager"},"history":{"undoStack":[],"redoStack":[],"deserializer":"History"},"encoding":"utf8","filePath":"/Users/lonnen/repos/fhr-jelly/generate.py","modifiedWhenLastPersisted":false,"digestWhenLastPersisted":"4df860aa162905f18636a704bcd6e7555e3d7446","deserializer":"TextBuffer"},{"text":"# Firefox Health Report - Jelly\n\n[![Build Status](https://travis-ci.org/mozilla/fhr-jelly.png?branch=master)](https://travis-ci.org/mozilla/fhr-jelly)\n\nThis is a very simple static website generator for the content (\"jelly\") that will be injected\ninto the about:healthreport page.\n\nBased on [nocturnal](https://github.com/mozilla/nocturnal/), it takes a single\njinja2 template, throws in some translations from .lang files, and generates a\nbunch of static, localized output files.\n\n## Usage\n\n### Checkout\n\n    git clone git://github.com/mozilla/fhr-jelly.git\n\nThe localization files will live in SVN, but do not exist yet.\nCheck them out into the subdirectory\n\"locale\" to pull in translations.\n\n    cd fhr-jelly\n    svn checkout https://svn.mozilla.org/projects/l10n-misc/trunk/firefoxhealthreport/locale/\n\n### Choosing a build version\n\nSpecify a version to build in settings.py. Available versions are 'passive' and 'urgent'.\n'Passive' is the default.\n\n### Generating output files\n\nSpecify an output directory (it shouldn't be the same directory as the repo) and allow a few seconds for\nthe script to scrape Mozilla's FTP server.\n\n    ./generate.py --output-dir html\n\nTo delete the output dir before generating the output (careful!), use\nthe --force option.\n\n    ./generate.py --output-dir html -f\n\nThe build version can be overwritten with the --version command line argument.\n\n    ./generate.py --version urgent -f\n\n### Extracting .lang files\n\nIf you change localizable strings in the templates, you'll want to extract those\nstrings and add them to the .lang files.\n\n    ./l10n_extract.py\n\nshould do the trick.\n\n## Enable Debug Mode\n\nTo render the FHR page using a custom JSON payload, follow these steps:\n\n1) Clone this repo:\n\n    git clone git://github.com/mozilla/fhr-jelly.git\n\n2) You need to run this on a simple web server. The easiest is to use the built in\nserver that comes with Python. Add the following to your .bash_profile\n\n    # usage\n    # $ server\n    alias server='python -m SimpleHTTPServer && open http://localhost:8000'\n\nFrom the command line run the following:\n\n3) cp js/config.js-local js/config.js\n\n4) cp json/payload.json-local json/payload.json\n\n5) Next, open up json/payload.json and paste your custom JSON in here.\n\n6) Run generate:\n\n    ./generate.py --output-dir html -f\n\n7) Open up your browser and point it to about:healthreport\n\n## License\n\nThis software is licensed under the [Mozilla Tri-License][MPL]:\n\n    ***** BEGIN LICENSE BLOCK *****\n    Version: MPL 1.1/GPL 2.0/LGPL 2.1\n\n    The contents of this file are subject to the Mozilla Public License Version\n    1.1 (the \"License\"); you may not use this file except in compliance with\n    the License. You may obtain a copy of the License at\n    http://www.mozilla.org/MPL/\n\n    Software distributed under the License is distributed on an \"AS IS\" basis,\n    WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License\n    for the specific language governing rights and limitations under the\n    License.\n\n    The Original Code is Nocturnal.\n\n    The Initial Developer of the Original Code is Mozilla.\n    Portions created by the Initial Developer are Copyright (C) 2012\n    the Initial Developer. All Rights Reserved.\n\n    Contributor(s):\n      Matthew Riley MacPherson <tofumatt@mozilla.com>\n      James Long <jlong@mozilla.com>\n      Fred Wenzel <fwenzel@mozilla.com>\n      Laura Thomson <lthomson@mozilla.com>\n\n    Alternatively, the contents of this file may be used under the terms of\n    either the GNU General Public License Version 2 or later (the \"GPL\"), or\n    the GNU Lesser General Public License Version 2.1 or later (the \"LGPL\"),\n    in which case the provisions of the GPL or the LGPL are applicable instead\n    of those above. If you wish to allow use of your version of this file only\n    under the terms of either the GPL or the LGPL, and not to allow others to\n    use your version of this file under the terms of the MPL, indicate your\n    decision by deleting the provisions above and replace them with the notice\n    and other provisions required by the GPL or the LGPL. If you do not delete\n    the provisions above, a recipient may use your version of this file under\n    the terms of any one of the MPL, the GPL or the LGPL.\n\n    ***** END LICENSE BLOCK *****\n\n[MPL]: http://www.mozilla.org/MPL/\n","markers":{"markers":{"1":{"id":1,"range":[[27,25],[27,25]],"tailed":false,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{"type":"selection","editorId":8,"goalBufferRange":null},"deserializer":"Marker"}},"deserializer":"MarkerManager"},"history":{"undoStack":[],"redoStack":[{"patches":[{"oldRange":[[8,79],[8,80]],"newRange":[[8,79],[8,79]],"oldText":"/","newText":"","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[8,78],[8,79]],"newRange":[[8,78],[8,78]],"oldText":".","newText":"","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"}],"deserializer":"History"},"encoding":"utf8","filePath":"/Users/lonnen/repos/fhr-jelly/README.md","modifiedWhenLastPersisted":false,"digestWhenLastPersisted":"8b4908687f738a4d2155527b57017086a6ccf8d4","deserializer":"TextBuffer"}],"deserializer":"Project"},"workspace":{"paneContainer":{"root":{"id":3,"items":[{"id":4,"softTabs":true,"displayBuffer":{"id":5,"softWrapped":true,"editorWidthInChars":null,"scrollTop":0,"scrollLeft":0,"tokenizedBuffer":{"bufferPath":"/Users/lonnen/repos/fhr-jelly/generate.py","invisibles":null,"deserializer":"TokenizedBuffer"},"invisibles":null,"deserializer":"DisplayBuffer"},"deserializer":"TextEditor"},{"id":8,"softTabs":true,"displayBuffer":{"id":9,"softWrapped":true,"editorWidthInChars":null,"scrollTop":184,"scrollLeft":0,"tokenizedBuffer":{"bufferPath":"/Users/lonnen/repos/fhr-jelly/README.md","invisibles":null,"deserializer":"TokenizedBuffer"},"invisibles":null,"deserializer":"DisplayBuffer"},"deserializer":"TextEditor"}],"activeItemURI":"/Users/lonnen/repos/fhr-jelly/README.md","focused":true,"deserializer":"Pane"},"activePaneId":3,"deserializer":"PaneContainer","version":1},"fullScreen":false,"packagesWithActiveGrammars":["language-python","language-gfm","language-hyperlink","language-todo"],"deserializer":"Workspace"},"packageStates":{"command-logger":{"eventLog":{"editor:display-updated":{"count":104,"name":"editor:display-updated","lastRun":1426399437500},"pane:item-added":{"count":2,"name":"pane:item-added","lastRun":1426275933308},"pane-container:active-pane-item-changed":{"count":2,"name":"pane-container:active-pane-item-changed","lastRun":1426275933309},"editor:attached":{"count":2,"name":"editor:attached","lastRun":1426275933347},"pane:active-item-changed":{"count":2,"name":"pane:active-item-changed","lastRun":1426275933349},"cursor:moved":{"count":21,"name":"cursor:moved","lastRun":1426282211621},"selection:changed":{"count":21,"name":"selection:changed","lastRun":1426282211621},"pane:active-item-modified-status-changed":{"count":2,"name":"pane:active-item-modified-status-changed","lastRun":1426276015067},"core:undo":{"count":2,"name":"core:undo","lastRun":1426276014766},"core:copy":{"count":2,"name":"core:copy","lastRun":1426276021691}}},"fuzzy-finder":{"/Users/lonnen/repos/fhr-jelly/generate.py":1426275929115,"/Users/lonnen/repos/fhr-jelly/README.md":1426275933349},"metrics":{"sessionLength":123515162},"tree-view":{"directoryExpansionStates":{},"selectedPath":"/Users/lonnen/repos/fhr-jelly/README.md","hasFocus":false,"attached":true,"scrollLeft":0,"scrollTop":0,"width":200}}}