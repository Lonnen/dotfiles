var _nuclideAnalytics = require('nuclide-analytics');

var _constantsJs = require('./constants.js');

'use babel';

/*
 * Copyright (c) 2015-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the license found in the LICENSE file in
 * the root directory of this source tree.
 */

var invariant = require('assert');

var _require = require('atom');

var CompositeDisposable = _require.CompositeDisposable;

var GRAMMARS_STRING = _constantsJs.JS_GRAMMARS.join(', ');
var diagnosticsOnFlySetting = 'nuclide-flow.diagnosticsOnFly';

var PACKAGE_NAME = 'nuclide-flow';

function getServiceByNuclideUri(service, file) {
  return require('nuclide-client').getServiceByNuclideUri(service, file);
}

var busySignalProvider = undefined;

var flowDiagnosticsProvider = undefined;

var disposables = undefined;

module.exports = {

  // $FlowIssue https://github.com/facebook/flow/issues/620
  config: require('../package.json').nuclide.config,

  activate: function activate() {
    if (!disposables) {
      disposables = new CompositeDisposable();

      var _require2 = require('nuclide-atom-helpers');

      var registerGrammarForFileExtension = _require2.registerGrammarForFileExtension;

      disposables.add(registerGrammarForFileExtension('source.ini', '.flowconfig'));
    }
  },

  /** Provider for autocomplete service. */
  createAutocompleteProvider: function createAutocompleteProvider() {
    var AutocompleteProvider = require('./FlowAutocompleteProvider');
    var autocompleteProvider = new AutocompleteProvider();
    var getSuggestions = autocompleteProvider.getSuggestions.bind(autocompleteProvider);
    return {
      selector: _constantsJs.JS_GRAMMARS.map(function (grammar) {
        return '.' + grammar;
      }).join(', '),
      disableForSelector: '.source.js .comment',
      inclusionPriority: 1,
      // We want to get ranked higher than the snippets provider.
      suggestionPriority: 5,
      onDidInsertSuggestion: function onDidInsertSuggestion() {
        (0, _nuclideAnalytics.track)('nuclide-flow.autocomplete-chosen');
      },
      getSuggestions: getSuggestions
    };
  },

  getHyperclickProvider: function getHyperclickProvider() {
    var FlowHyperclickProvider = require('./FlowHyperclickProvider');
    var flowHyperclickProvider = new FlowHyperclickProvider();
    var getSuggestionForWord = flowHyperclickProvider.getSuggestionForWord.bind(flowHyperclickProvider);
    return {
      wordRegExp: _constantsJs.JAVASCRIPT_WORD_REGEX,
      priority: 20,
      providerName: PACKAGE_NAME,
      getSuggestionForWord: getSuggestionForWord
    };
  },

  provideBusySignal: function provideBusySignal() {
    if (!busySignalProvider) {
      var _require3 = require('nuclide-busy-signal-provider-base');

      var _BusySignalProviderBase = _require3.BusySignalProviderBase;

      busySignalProvider = new _BusySignalProviderBase();
    }
    return busySignalProvider;
  },

  provideDiagnostics: function provideDiagnostics() {
    if (!flowDiagnosticsProvider) {
      var busyProvider = this.provideBusySignal();
      var FlowDiagnosticsProvider = require('./FlowDiagnosticsProvider');
      var runOnTheFly = atom.config.get(diagnosticsOnFlySetting);
      flowDiagnosticsProvider = new FlowDiagnosticsProvider(runOnTheFly, busyProvider);
      invariant(disposables);
      disposables.add(atom.config.observe(diagnosticsOnFlySetting, function (newValue) {
        invariant(flowDiagnosticsProvider);
        flowDiagnosticsProvider.setRunOnTheFly(newValue);
      }));

      var _require4 = require('nuclide-atom-helpers');

      var projects = _require4.projects;

      disposables.add(projects.onDidRemoveProjectPath(function (projectPath) {
        invariant(flowDiagnosticsProvider);
        flowDiagnosticsProvider.invalidateProjectPath(projectPath);
      }));
    }
    return flowDiagnosticsProvider;
  },

  createTypeHintProvider: function createTypeHintProvider() {
    var _require5 = require('./FlowTypeHintProvider');

    var FlowTypeHintProvider = _require5.FlowTypeHintProvider;

    var flowTypeHintProvider = new FlowTypeHintProvider();
    var typeHint = flowTypeHintProvider.typeHint.bind(flowTypeHintProvider);
    return {
      selector: GRAMMARS_STRING,
      providerName: PACKAGE_NAME,
      inclusionPriority: 1,
      typeHint: typeHint
    };
  },

  deactivate: function deactivate() {
    // TODO(mbolin): Find a way to unregister the autocomplete provider from
    // ServiceHub, or set a boolean in the autocomplete provider to always return
    // empty results.
    getServiceByNuclideUri('FlowService').dispose();
    if (disposables) {
      disposables.dispose();
      disposables = null;
    }
    if (flowDiagnosticsProvider) {
      flowDiagnosticsProvider.dispose();
      flowDiagnosticsProvider = null;
    }
  }
};
//# sourceMappingURL=data:application/json;base64,
