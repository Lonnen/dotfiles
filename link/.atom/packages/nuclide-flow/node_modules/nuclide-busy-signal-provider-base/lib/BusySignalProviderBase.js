Object.defineProperty(exports, '__esModule', {
  value: true
});

/*
 * Copyright (c) 2015-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the license found in the LICENSE file in
 * the root directory of this source tree.
 */

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

var _rx = require('rx');

var _assert = require('assert');

var _assert2 = _interopRequireDefault(_assert);

var _nuclideCommons = require('nuclide-commons');

'use babel';
var isPromise = _nuclideCommons.promises.isPromise;

var BusySignalProviderBase = (function () {
  function BusySignalProviderBase() {
    _classCallCheck(this, BusySignalProviderBase);

    this.messages = new _rx.Subject();
    this._nextId = 0;
  }

  _createClass(BusySignalProviderBase, [{
    key: '_nextMessagePair',
    value: function _nextMessagePair(message) {
      var busy = {
        status: 'busy',
        id: this._nextId,
        message: message
      };
      var done = {
        status: 'done',
        id: this._nextId
      };
      this._nextId++;
      return { busy: busy, done: done };
    }

    /**
     * Publishes a 'busy' message with the given string. Marks it as done when the
     * promise returned by the given function is resolved or rejected.
     *
     * Used to indicate that some work is ongoing while the given asynchronous
     * function executes.
     */
  }, {
    key: 'reportBusy',
    value: function reportBusy(message, f) {
      var _this = this;

      var _nextMessagePair2 = this._nextMessagePair(message);

      var busy = _nextMessagePair2.busy;
      var done = _nextMessagePair2.done;

      var publishDone = function publishDone() {
        _this.messages.onNext(done);
      };
      this.messages.onNext(busy);
      try {
        var returnValue = f();
        (0, _assert2['default'])(isPromise(returnValue));
        returnValue.then(publishDone, publishDone);
        return returnValue;
      } catch (e) {
        publishDone();
        throw e;
      }
    }
  }]);

  return BusySignalProviderBase;
})();

exports.BusySignalProviderBase = BusySignalProviderBase;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi92YXIvZm9sZGVycy94Zi9yc3BoNF9jNTczMTVyczU3eHhzZHNrcnhudjM2dDAvVC90bXBwZmw1Mm5wdWJsaXNoX3BhY2thZ2VzL25wbS9udWNsaWRlLWJ1c3ktc2lnbmFsLXByb3ZpZGVyLWJhc2UvbGliL0J1c3lTaWduYWxQcm92aWRlckJhc2UuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7O2tCQWFzQixJQUFJOztzQkFDSixRQUFROzs7OzhCQUVQLGlCQUFpQjs7QUFoQnhDLFdBQVcsQ0FBQztJQWlCTCxTQUFTLG1CQURSLFFBQVEsQ0FDVCxTQUFTOztJQUVILHNCQUFzQjtBQUd0QixXQUhBLHNCQUFzQixHQUduQjswQkFISCxzQkFBc0I7O0FBSS9CLFFBQUksQ0FBQyxRQUFRLEdBQUcsUUFWWixPQUFPLEVBVWtCLENBQUM7QUFDOUIsUUFBSSxDQUFDLE9BQU8sR0FBRyxDQUFDLENBQUM7R0FDbEI7O2VBTlUsc0JBQXNCOztXQVFqQiwwQkFBQyxPQUFlLEVBQXNEO0FBQ3BGLFVBQU0sSUFBSSxHQUFHO0FBQ1gsY0FBTSxFQUFFLE1BQU07QUFDZCxVQUFFLEVBQUUsSUFBSSxDQUFDLE9BQU87QUFDaEIsZUFBTyxFQUFQLE9BQU87T0FDUixDQUFDO0FBQ0YsVUFBTSxJQUFJLEdBQUc7QUFDWCxjQUFNLEVBQUUsTUFBTTtBQUNkLFVBQUUsRUFBRSxJQUFJLENBQUMsT0FBTztPQUNqQixDQUFDO0FBQ0YsVUFBSSxDQUFDLE9BQU8sRUFBRSxDQUFDO0FBQ2YsYUFBTyxFQUFDLElBQUksRUFBSixJQUFJLEVBQUUsSUFBSSxFQUFKLElBQUksRUFBQyxDQUFDO0tBQ3JCOzs7Ozs7Ozs7OztXQVNZLG9CQUFDLE9BQWUsRUFBRSxDQUFtQixFQUFjOzs7OEJBQ3pDLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxPQUFPLENBQUM7O1VBQTVDLElBQUkscUJBQUosSUFBSTtVQUFFLElBQUkscUJBQUosSUFBSTs7QUFDakIsVUFBTSxXQUFXLEdBQUcsU0FBZCxXQUFXLEdBQVM7QUFDeEIsY0FBSyxRQUFRLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDO09BQzVCLENBQUM7QUFDRixVQUFJLENBQUMsUUFBUSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQztBQUMzQixVQUFJO0FBQ0YsWUFBTSxXQUFXLEdBQUcsQ0FBQyxFQUFFLENBQUM7QUFDeEIsaUNBQVUsU0FBUyxDQUFDLFdBQVcsQ0FBQyxDQUFDLENBQUM7QUFDbEMsbUJBQVcsQ0FBQyxJQUFJLENBQUMsV0FBVyxFQUFFLFdBQVcsQ0FBQyxDQUFDO0FBQzNDLGVBQU8sV0FBVyxDQUFDO09BQ3BCLENBQUMsT0FBTyxDQUFDLEVBQUU7QUFDVixtQkFBVyxFQUFFLENBQUM7QUFDZCxjQUFNLENBQUMsQ0FBQztPQUNUO0tBQ0Y7OztTQTVDVSxzQkFBc0IiLCJmaWxlIjoiL3Zhci9mb2xkZXJzL3hmL3JzcGg0X2M1NzMxNXJzNTd4eHNkc2tyeG52MzZ0MC9UL3RtcHBmbDUybnB1Ymxpc2hfcGFja2FnZXMvbnBtL251Y2xpZGUtYnVzeS1zaWduYWwtcHJvdmlkZXItYmFzZS9saWIvQnVzeVNpZ25hbFByb3ZpZGVyQmFzZS5qcyIsInNvdXJjZXNDb250ZW50IjpbIid1c2UgYmFiZWwnO1xuLyogQGZsb3cgKi9cblxuLypcbiAqIENvcHlyaWdodCAoYykgMjAxNS1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBsaWNlbnNlIGZvdW5kIGluIHRoZSBMSUNFTlNFIGZpbGUgaW5cbiAqIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG5cbmltcG9ydCB0eXBlIHtCdXN5U2lnbmFsTWVzc2FnZX0gZnJvbSAnbnVjbGlkZS1idXN5LXNpZ25hbC1pbnRlcmZhY2VzJztcblxuaW1wb3J0IHtTdWJqZWN0fSBmcm9tICdyeCc7XG5pbXBvcnQgaW52YXJpYW50IGZyb20gJ2Fzc2VydCc7XG5cbmltcG9ydCB7cHJvbWlzZXN9IGZyb20gJ251Y2xpZGUtY29tbW9ucyc7XG5jb25zdCB7aXNQcm9taXNlfSA9IHByb21pc2VzO1xuXG5leHBvcnQgY2xhc3MgQnVzeVNpZ25hbFByb3ZpZGVyQmFzZSB7XG4gIG1lc3NhZ2VzOiBTdWJqZWN0PEJ1c3lTaWduYWxNZXNzYWdlPjtcbiAgX25leHRJZDogbnVtYmVyO1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICB0aGlzLm1lc3NhZ2VzID0gbmV3IFN1YmplY3QoKTtcbiAgICB0aGlzLl9uZXh0SWQgPSAwO1xuICB9XG5cbiAgX25leHRNZXNzYWdlUGFpcihtZXNzYWdlOiBzdHJpbmcpOiB7YnVzeTogQnVzeVNpZ25hbE1lc3NhZ2UsIGRvbmU6IEJ1c3lTaWduYWxNZXNzYWdlfSB7XG4gICAgY29uc3QgYnVzeSA9IHtcbiAgICAgIHN0YXR1czogJ2J1c3knLFxuICAgICAgaWQ6IHRoaXMuX25leHRJZCxcbiAgICAgIG1lc3NhZ2UsXG4gICAgfTtcbiAgICBjb25zdCBkb25lID0ge1xuICAgICAgc3RhdHVzOiAnZG9uZScsXG4gICAgICBpZDogdGhpcy5fbmV4dElkLFxuICAgIH07XG4gICAgdGhpcy5fbmV4dElkKys7XG4gICAgcmV0dXJuIHtidXN5LCBkb25lfTtcbiAgfVxuXG4gIC8qKlxuICAgKiBQdWJsaXNoZXMgYSAnYnVzeScgbWVzc2FnZSB3aXRoIHRoZSBnaXZlbiBzdHJpbmcuIE1hcmtzIGl0IGFzIGRvbmUgd2hlbiB0aGVcbiAgICogcHJvbWlzZSByZXR1cm5lZCBieSB0aGUgZ2l2ZW4gZnVuY3Rpb24gaXMgcmVzb2x2ZWQgb3IgcmVqZWN0ZWQuXG4gICAqXG4gICAqIFVzZWQgdG8gaW5kaWNhdGUgdGhhdCBzb21lIHdvcmsgaXMgb25nb2luZyB3aGlsZSB0aGUgZ2l2ZW4gYXN5bmNocm9ub3VzXG4gICAqIGZ1bmN0aW9uIGV4ZWN1dGVzLlxuICAgKi9cbiAgcmVwb3J0QnVzeTxUPihtZXNzYWdlOiBzdHJpbmcsIGY6ICgpID0+IFByb21pc2U8VD4pOiBQcm9taXNlPFQ+IHtcbiAgICBjb25zdCB7YnVzeSwgZG9uZX0gPSB0aGlzLl9uZXh0TWVzc2FnZVBhaXIobWVzc2FnZSk7XG4gICAgY29uc3QgcHVibGlzaERvbmUgPSAoKSA9PiB7XG4gICAgICB0aGlzLm1lc3NhZ2VzLm9uTmV4dChkb25lKTtcbiAgICB9O1xuICAgIHRoaXMubWVzc2FnZXMub25OZXh0KGJ1c3kpO1xuICAgIHRyeSB7XG4gICAgICBjb25zdCByZXR1cm5WYWx1ZSA9IGYoKTtcbiAgICAgIGludmFyaWFudChpc1Byb21pc2UocmV0dXJuVmFsdWUpKTtcbiAgICAgIHJldHVyblZhbHVlLnRoZW4ocHVibGlzaERvbmUsIHB1Ymxpc2hEb25lKTtcbiAgICAgIHJldHVybiByZXR1cm5WYWx1ZTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICBwdWJsaXNoRG9uZSgpO1xuICAgICAgdGhyb3cgZTtcbiAgICB9XG4gIH1cbn1cbiJdfQ==
