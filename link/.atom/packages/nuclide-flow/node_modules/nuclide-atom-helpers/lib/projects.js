
/*
 * Copyright (c) 2015-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the license found in the LICENSE file in
 * the root directory of this source tree.
 */

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

var _require = require('atom');

var Emitter = _require.Emitter;
var Directory = _require.Directory;

var _require2 = require('nuclide-remote-uri');

var isRemote = _require2.isRemote;

var _require3 = require('nuclide-commons');

var singleton = _require3.singleton;

var REMOVE_PROJECT_EVENT = 'did-remove-project';
var ADD_PROJECT_EVENT = 'did-add-project';
var PROJECT_PATH_WATCHER_INSTANCE_KEY = '_nuclide_project_path_watcher';

function getValidProjectPaths() {
  return atom.project.getDirectories().filter(function (directory) {
    // If a remote directory path is a local `Directory` instance, the project path
    // isn't yet ready for consumption.
    if (isRemote(directory.getPath()) && directory instanceof Directory) {
      return false;
    }
    return true;
  }).map(function (directory) {
    return directory.getPath();
  });
}

var ProjectManager = (function () {
  function ProjectManager() {
    _classCallCheck(this, ProjectManager);

    this._emitter = new Emitter();
    this._projectPaths = new Set(getValidProjectPaths());
    atom.project.onDidChangePaths(this._updateProjectPaths.bind(this));
  }

  _createClass(ProjectManager, [{
    key: '_updateProjectPaths',
    value: function _updateProjectPaths(newProjectPaths) {
      var oldProjectPathSet = this._projectPaths;
      var newProjectPathSet = new Set(getValidProjectPaths());
      for (var oldProjectPath of oldProjectPathSet) {
        if (!newProjectPathSet.has(oldProjectPath)) {
          this._emitter.emit(REMOVE_PROJECT_EVENT, oldProjectPath);
        }
      }
      for (var newProjectPath of newProjectPathSet) {
        if (!oldProjectPathSet.has(newProjectPath)) {
          this._emitter.emit(ADD_PROJECT_EVENT, newProjectPath);
        }
      }
      this._projectPaths = newProjectPathSet;
    }
  }, {
    key: 'observeProjectPaths',
    value: function observeProjectPaths(callback) {
      for (var _projectPath of this._projectPaths) {
        callback(_projectPath);
      }
      return this._emitter.on(ADD_PROJECT_EVENT, callback);
    }
  }, {
    key: 'onDidAddProjectPath',
    value: function onDidAddProjectPath(callback) {
      return this._emitter.on(ADD_PROJECT_EVENT, callback);
    }
  }, {
    key: 'onDidRemoveProjectPath',
    value: function onDidRemoveProjectPath(callback) {
      return this._emitter.on(REMOVE_PROJECT_EVENT, callback);
    }
  }]);

  return ProjectManager;
})();

function getProjectManager() {
  return singleton.get(PROJECT_PATH_WATCHER_INSTANCE_KEY, function () {
    return new ProjectManager();
  });
}

module.exports = {
  observeProjectPaths: function observeProjectPaths(callback) {
    return getProjectManager().observeProjectPaths(callback);
  },

  onDidAddProjectPath: function onDidAddProjectPath(callback) {
    return getProjectManager().onDidAddProjectPath(callback);
  },

  onDidRemoveProjectPath: function onDidRemoveProjectPath(callback) {
    return getProjectManager().onDidRemoveProjectPath(callback);
  },

  __test__: {
    PROJECT_PATH_WATCHER_INSTANCE_KEY: PROJECT_PATH_WATCHER_INSTANCE_KEY
  }
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi92YXIvZm9sZGVycy94Zi9yc3BoNF9jNTczMTVyczU3eHhzZHNrcnhudjM2dDAvVC90bXBwZmw1Mm5wdWJsaXNoX3BhY2thZ2VzL25wbS9udWNsaWRlLWF0b20taGVscGVycy9saWIvcHJvamVjdHMuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsV0FBVyxDQUFDOzs7Ozs7Ozs7Ozs7OztlQVdpQixPQUFPLENBQUMsTUFBTSxDQUFDOztJQUFyQyxPQUFPLFlBQVAsT0FBTztJQUFFLFNBQVMsWUFBVCxTQUFTOztnQkFDTixPQUFPLENBQUMsb0JBQW9CLENBQUM7O0lBQXpDLFFBQVEsYUFBUixRQUFROztnQkFDSyxPQUFPLENBQUMsaUJBQWlCLENBQUM7O0lBQXZDLFNBQVMsYUFBVCxTQUFTOztBQUVoQixJQUFNLG9CQUFvQixHQUFHLG9CQUFvQixDQUFDO0FBQ2xELElBQU0saUJBQWlCLEdBQUcsaUJBQWlCLENBQUM7QUFDNUMsSUFBTSxpQ0FBaUMsR0FBRywrQkFBK0IsQ0FBQzs7QUFFMUUsU0FBUyxvQkFBb0IsR0FBa0I7QUFDN0MsU0FBTyxJQUFJLENBQUMsT0FBTyxDQUFDLGNBQWMsRUFBRSxDQUFDLE1BQU0sQ0FBQyxVQUFBLFNBQVMsRUFBSTs7O0FBR3ZELFFBQUksUUFBUSxDQUFDLFNBQVMsQ0FBQyxPQUFPLEVBQUUsQ0FBQyxJQUFJLFNBQVMsWUFBWSxTQUFTLEVBQUU7QUFDbkUsYUFBTyxLQUFLLENBQUM7S0FDZDtBQUNELFdBQU8sSUFBSSxDQUFDO0dBQ2IsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxVQUFBLFNBQVM7V0FBSSxTQUFTLENBQUMsT0FBTyxFQUFFO0dBQUEsQ0FBQyxDQUFDO0NBQzFDOztJQUVLLGNBQWM7QUFLUCxXQUxQLGNBQWMsR0FLSjswQkFMVixjQUFjOztBQU1oQixRQUFJLENBQUMsUUFBUSxHQUFHLElBQUksT0FBTyxFQUFFLENBQUM7QUFDOUIsUUFBSSxDQUFDLGFBQWEsR0FBRyxJQUFJLEdBQUcsQ0FBQyxvQkFBb0IsRUFBRSxDQUFDLENBQUM7QUFDckQsUUFBSSxDQUFDLE9BQU8sQ0FBQyxnQkFBZ0IsQ0FBQyxJQUFJLENBQUMsbUJBQW1CLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUM7R0FDcEU7O2VBVEcsY0FBYzs7V0FXQyw2QkFBQyxlQUE4QixFQUFRO0FBQ3hELFVBQU0saUJBQWlCLEdBQUcsSUFBSSxDQUFDLGFBQWEsQ0FBQztBQUM3QyxVQUFNLGlCQUFpQixHQUFHLElBQUksR0FBRyxDQUFDLG9CQUFvQixFQUFFLENBQUMsQ0FBQztBQUMxRCxXQUFLLElBQU0sY0FBYyxJQUFJLGlCQUFpQixFQUFFO0FBQzlDLFlBQUksQ0FBQyxpQkFBaUIsQ0FBQyxHQUFHLENBQUMsY0FBYyxDQUFDLEVBQUU7QUFDMUMsY0FBSSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsb0JBQW9CLEVBQUUsY0FBYyxDQUFDLENBQUM7U0FDMUQ7T0FDRjtBQUNELFdBQUssSUFBTSxjQUFjLElBQUksaUJBQWlCLEVBQUU7QUFDOUMsWUFBSSxDQUFDLGlCQUFpQixDQUFDLEdBQUcsQ0FBQyxjQUFjLENBQUMsRUFBRTtBQUMxQyxjQUFJLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxpQkFBaUIsRUFBRSxjQUFjLENBQUMsQ0FBQztTQUN2RDtPQUNGO0FBQ0QsVUFBSSxDQUFDLGFBQWEsR0FBRyxpQkFBaUIsQ0FBQztLQUN4Qzs7O1dBRWtCLDZCQUFDLFFBQXVDLEVBQW1CO0FBQzVFLFdBQUssSUFBTSxZQUFXLElBQUksSUFBSSxDQUFDLGFBQWEsRUFBRTtBQUM1QyxnQkFBUSxDQUFDLFlBQVcsQ0FBQyxDQUFDO09BQ3ZCO0FBQ0QsYUFBTyxJQUFJLENBQUMsUUFBUSxDQUFDLEVBQUUsQ0FBQyxpQkFBaUIsRUFBRSxRQUFRLENBQUMsQ0FBQztLQUN0RDs7O1dBRWtCLDZCQUFDLFFBQXVDLEVBQW1CO0FBQzVFLGFBQU8sSUFBSSxDQUFDLFFBQVEsQ0FBQyxFQUFFLENBQUMsaUJBQWlCLEVBQUUsUUFBUSxDQUFDLENBQUM7S0FDdEQ7OztXQUVxQixnQ0FBQyxRQUF1QyxFQUFtQjtBQUMvRSxhQUFPLElBQUksQ0FBQyxRQUFRLENBQUMsRUFBRSxDQUFDLG9CQUFvQixFQUFFLFFBQVEsQ0FBQyxDQUFDO0tBQ3pEOzs7U0F4Q0csY0FBYzs7O0FBMkNwQixTQUFTLGlCQUFpQixHQUFtQjtBQUMzQyxTQUFPLFNBQVMsQ0FBQyxHQUFHLENBQ2xCLGlDQUFpQyxFQUNqQztXQUFNLElBQUksY0FBYyxFQUFFO0dBQUEsQ0FDM0IsQ0FBQztDQUNIOztBQUVELE1BQU0sQ0FBQyxPQUFPLEdBQUc7QUFDZixxQkFBbUIsRUFBQSw2QkFBQyxRQUF1QyxFQUFtQjtBQUM1RSxXQUFPLGlCQUFpQixFQUFFLENBQUMsbUJBQW1CLENBQUMsUUFBUSxDQUFDLENBQUM7R0FDMUQ7O0FBRUQscUJBQW1CLEVBQUEsNkJBQUMsUUFBdUMsRUFBbUI7QUFDNUUsV0FBTyxpQkFBaUIsRUFBRSxDQUFDLG1CQUFtQixDQUFDLFFBQVEsQ0FBQyxDQUFDO0dBQzFEOztBQUVELHdCQUFzQixFQUFBLGdDQUFDLFFBQXVDLEVBQW1CO0FBQy9FLFdBQU8saUJBQWlCLEVBQUUsQ0FBQyxzQkFBc0IsQ0FBQyxRQUFRLENBQUMsQ0FBQztHQUM3RDs7QUFFRCxVQUFRLEVBQUU7QUFDUixxQ0FBaUMsRUFBakMsaUNBQWlDO0dBQ2xDO0NBQ0YsQ0FBQyIsImZpbGUiOiIvdmFyL2ZvbGRlcnMveGYvcnNwaDRfYzU3MzE1cnM1N3h4c2Rza3J4bnYzNnQwL1QvdG1wcGZsNTJucHVibGlzaF9wYWNrYWdlcy9ucG0vbnVjbGlkZS1hdG9tLWhlbHBlcnMvbGliL3Byb2plY3RzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBiYWJlbCc7XG4vKiBAZmxvdyAqL1xuXG4vKlxuICogQ29weXJpZ2h0IChjKSAyMDE1LXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIGxpY2Vuc2UgZm91bmQgaW4gdGhlIExJQ0VOU0UgZmlsZSBpblxuICogdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cblxuY29uc3Qge0VtaXR0ZXIsIERpcmVjdG9yeX0gPSByZXF1aXJlKCdhdG9tJyk7XG5jb25zdCB7aXNSZW1vdGV9ID0gcmVxdWlyZSgnbnVjbGlkZS1yZW1vdGUtdXJpJyk7XG5jb25zdCB7c2luZ2xldG9ufSA9IHJlcXVpcmUoJ251Y2xpZGUtY29tbW9ucycpO1xuXG5jb25zdCBSRU1PVkVfUFJPSkVDVF9FVkVOVCA9ICdkaWQtcmVtb3ZlLXByb2plY3QnO1xuY29uc3QgQUREX1BST0pFQ1RfRVZFTlQgPSAnZGlkLWFkZC1wcm9qZWN0JztcbmNvbnN0IFBST0pFQ1RfUEFUSF9XQVRDSEVSX0lOU1RBTkNFX0tFWSA9ICdfbnVjbGlkZV9wcm9qZWN0X3BhdGhfd2F0Y2hlcic7XG5cbmZ1bmN0aW9uIGdldFZhbGlkUHJvamVjdFBhdGhzKCk6IEFycmF5PHN0cmluZz4ge1xuICByZXR1cm4gYXRvbS5wcm9qZWN0LmdldERpcmVjdG9yaWVzKCkuZmlsdGVyKGRpcmVjdG9yeSA9PiB7XG4gICAgLy8gSWYgYSByZW1vdGUgZGlyZWN0b3J5IHBhdGggaXMgYSBsb2NhbCBgRGlyZWN0b3J5YCBpbnN0YW5jZSwgdGhlIHByb2plY3QgcGF0aFxuICAgIC8vIGlzbid0IHlldCByZWFkeSBmb3IgY29uc3VtcHRpb24uXG4gICAgaWYgKGlzUmVtb3RlKGRpcmVjdG9yeS5nZXRQYXRoKCkpICYmIGRpcmVjdG9yeSBpbnN0YW5jZW9mIERpcmVjdG9yeSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICByZXR1cm4gdHJ1ZTtcbiAgfSkubWFwKGRpcmVjdG9yeSA9PiBkaXJlY3RvcnkuZ2V0UGF0aCgpKTtcbn1cblxuY2xhc3MgUHJvamVjdE1hbmFnZXIge1xuXG4gIF9lbWl0dGVyOiBFbWl0dGVyO1xuICBfcHJvamVjdFBhdGhzOiBTZXQ8c3RyaW5nPjtcblxuICBjb25zdHJ1Y3RvcigpIHtcbiAgICB0aGlzLl9lbWl0dGVyID0gbmV3IEVtaXR0ZXIoKTtcbiAgICB0aGlzLl9wcm9qZWN0UGF0aHMgPSBuZXcgU2V0KGdldFZhbGlkUHJvamVjdFBhdGhzKCkpO1xuICAgIGF0b20ucHJvamVjdC5vbkRpZENoYW5nZVBhdGhzKHRoaXMuX3VwZGF0ZVByb2plY3RQYXRocy5iaW5kKHRoaXMpKTtcbiAgfVxuXG4gIF91cGRhdGVQcm9qZWN0UGF0aHMobmV3UHJvamVjdFBhdGhzOiBBcnJheTxzdHJpbmc+KTogdm9pZCB7XG4gICAgY29uc3Qgb2xkUHJvamVjdFBhdGhTZXQgPSB0aGlzLl9wcm9qZWN0UGF0aHM7XG4gICAgY29uc3QgbmV3UHJvamVjdFBhdGhTZXQgPSBuZXcgU2V0KGdldFZhbGlkUHJvamVjdFBhdGhzKCkpO1xuICAgIGZvciAoY29uc3Qgb2xkUHJvamVjdFBhdGggb2Ygb2xkUHJvamVjdFBhdGhTZXQpIHtcbiAgICAgIGlmICghbmV3UHJvamVjdFBhdGhTZXQuaGFzKG9sZFByb2plY3RQYXRoKSkge1xuICAgICAgICB0aGlzLl9lbWl0dGVyLmVtaXQoUkVNT1ZFX1BST0pFQ1RfRVZFTlQsIG9sZFByb2plY3RQYXRoKTtcbiAgICAgIH1cbiAgICB9XG4gICAgZm9yIChjb25zdCBuZXdQcm9qZWN0UGF0aCBvZiBuZXdQcm9qZWN0UGF0aFNldCkge1xuICAgICAgaWYgKCFvbGRQcm9qZWN0UGF0aFNldC5oYXMobmV3UHJvamVjdFBhdGgpKSB7XG4gICAgICAgIHRoaXMuX2VtaXR0ZXIuZW1pdChBRERfUFJPSkVDVF9FVkVOVCwgbmV3UHJvamVjdFBhdGgpO1xuICAgICAgfVxuICAgIH1cbiAgICB0aGlzLl9wcm9qZWN0UGF0aHMgPSBuZXdQcm9qZWN0UGF0aFNldDtcbiAgfVxuXG4gIG9ic2VydmVQcm9qZWN0UGF0aHMoY2FsbGJhY2s6IChwcm9qZWN0UGF0aDogc3RyaW5nKSA9PiB2b2lkKTogYXRvbSREaXNwb3NhYmxlIHtcbiAgICBmb3IgKGNvbnN0IHByb2plY3RQYXRoIG9mIHRoaXMuX3Byb2plY3RQYXRocykge1xuICAgICAgY2FsbGJhY2socHJvamVjdFBhdGgpO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcy5fZW1pdHRlci5vbihBRERfUFJPSkVDVF9FVkVOVCwgY2FsbGJhY2spO1xuICB9XG5cbiAgb25EaWRBZGRQcm9qZWN0UGF0aChjYWxsYmFjazogKHByb2plY3RQYXRoOiBzdHJpbmcpID0+IHZvaWQpOiBhdG9tJERpc3Bvc2FibGUge1xuICAgIHJldHVybiB0aGlzLl9lbWl0dGVyLm9uKEFERF9QUk9KRUNUX0VWRU5ULCBjYWxsYmFjayk7XG4gIH1cblxuICBvbkRpZFJlbW92ZVByb2plY3RQYXRoKGNhbGxiYWNrOiAocHJvamVjdFBhdGg6IHN0cmluZykgPT4gdm9pZCk6IGF0b20kRGlzcG9zYWJsZSB7XG4gICAgcmV0dXJuIHRoaXMuX2VtaXR0ZXIub24oUkVNT1ZFX1BST0pFQ1RfRVZFTlQsIGNhbGxiYWNrKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBnZXRQcm9qZWN0TWFuYWdlcigpOiBQcm9qZWN0TWFuYWdlciB7XG4gIHJldHVybiBzaW5nbGV0b24uZ2V0KFxuICAgIFBST0pFQ1RfUEFUSF9XQVRDSEVSX0lOU1RBTkNFX0tFWSxcbiAgICAoKSA9PiBuZXcgUHJvamVjdE1hbmFnZXIoKSxcbiAgKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIG9ic2VydmVQcm9qZWN0UGF0aHMoY2FsbGJhY2s6IChwcm9qZWN0UGF0aDogc3RyaW5nKSA9PiB2b2lkKTogYXRvbSREaXNwb3NhYmxlIHtcbiAgICByZXR1cm4gZ2V0UHJvamVjdE1hbmFnZXIoKS5vYnNlcnZlUHJvamVjdFBhdGhzKGNhbGxiYWNrKTtcbiAgfSxcblxuICBvbkRpZEFkZFByb2plY3RQYXRoKGNhbGxiYWNrOiAocHJvamVjdFBhdGg6IHN0cmluZykgPT4gdm9pZCk6IGF0b20kRGlzcG9zYWJsZSB7XG4gICAgcmV0dXJuIGdldFByb2plY3RNYW5hZ2VyKCkub25EaWRBZGRQcm9qZWN0UGF0aChjYWxsYmFjayk7XG4gIH0sXG5cbiAgb25EaWRSZW1vdmVQcm9qZWN0UGF0aChjYWxsYmFjazogKHByb2plY3RQYXRoOiBzdHJpbmcpID0+IHZvaWQpOiBhdG9tJERpc3Bvc2FibGUge1xuICAgIHJldHVybiBnZXRQcm9qZWN0TWFuYWdlcigpLm9uRGlkUmVtb3ZlUHJvamVjdFBhdGgoY2FsbGJhY2spO1xuICB9LFxuXG4gIF9fdGVzdF9fOiB7XG4gICAgUFJPSkVDVF9QQVRIX1dBVENIRVJfSU5TVEFOQ0VfS0VZLFxuICB9LFxufTtcbiJdfQ==
