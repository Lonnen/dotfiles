
/*
 * Copyright (c) 2015-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the license found in the LICENSE file in
 * the root directory of this source tree.
 */

/**
 * Displays a loading notification while waiting for a promise.
 * Waits delayMs before actually showing the notification (to prevent flicker).
 */

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var withLoadingNotification = _asyncToGenerator(function* (promise, message) {
  var delayMs = arguments.length <= 2 || arguments[2] === undefined ? 100 : arguments[2];
  var options = arguments.length <= 3 || arguments[3] === undefined ? {} : arguments[3];

  var notif = null;
  var timeout = setTimeout(function () {
    notif = atom.notifications.addInfo(message, _extends({
      dismissable: true
    }, options));
  }, delayMs);
  try {
    return yield promise;
  } finally {
    clearTimeout(timeout);
    if (notif) {
      notif.dismiss();
    }
  }
});

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { var callNext = step.bind(null, 'next'); var callThrow = step.bind(null, 'throw'); function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(callNext, callThrow); } } callNext(); }); }; }

module.exports = withLoadingNotification;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi92YXIvZm9sZGVycy94Zi9yc3BoNF9jNTczMTVyczU3eHhzZHNrcnhudjM2dDAvVC90bXBwZmw1Mm5wdWJsaXNoX3BhY2thZ2VzL25wbS9udWNsaWRlLWF0b20taGVscGVycy9saWIvd2l0aC1sb2FkaW5nLW5vdGlmaWNhdGlvbi5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxXQUFXLENBQUM7Ozs7Ozs7Ozs7Ozs7Ozs7O0lBZUcsdUJBQXVCLHFCQUF0QyxXQUNFLE9BQW1CLEVBQ25CLE9BQWUsRUFHSDtNQUZaLE9BQWUseURBQUcsR0FBRztNQUNyQixPQUFlLHlEQUFHLEVBQUU7O0FBRXBCLE1BQUksS0FBSyxHQUFHLElBQUksQ0FBQztBQUNqQixNQUFNLE9BQU8sR0FBRyxVQUFVLENBQUMsWUFBTTtBQUMvQixTQUFLLEdBQUcsSUFBSSxDQUFDLGFBQWEsQ0FBQyxPQUFPLENBQUMsT0FBTztBQUN4QyxpQkFBVyxFQUFFLElBQUk7T0FDZCxPQUFPLEVBQ1YsQ0FBQztHQUNKLEVBQUUsT0FBTyxDQUFDLENBQUM7QUFDWixNQUFJO0FBQ0YsV0FBTyxNQUFNLE9BQU8sQ0FBQztHQUN0QixTQUFTO0FBQ1IsZ0JBQVksQ0FBQyxPQUFPLENBQUMsQ0FBQztBQUN0QixRQUFJLEtBQUssRUFBRTtBQUNULFdBQUssQ0FBQyxPQUFPLEVBQUUsQ0FBQztLQUNqQjtHQUNGO0NBQ0Y7Ozs7QUFFRCxNQUFNLENBQUMsT0FBTyxHQUFHLHVCQUF1QixDQUFDIiwiZmlsZSI6Ii92YXIvZm9sZGVycy94Zi9yc3BoNF9jNTczMTVyczU3eHhzZHNrcnhudjM2dDAvVC90bXBwZmw1Mm5wdWJsaXNoX3BhY2thZ2VzL25wbS9udWNsaWRlLWF0b20taGVscGVycy9saWIvd2l0aC1sb2FkaW5nLW5vdGlmaWNhdGlvbi5qcyIsInNvdXJjZXNDb250ZW50IjpbIid1c2UgYmFiZWwnO1xuLyogQGZsb3cgKi9cblxuLypcbiAqIENvcHlyaWdodCAoYykgMjAxNS1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBsaWNlbnNlIGZvdW5kIGluIHRoZSBMSUNFTlNFIGZpbGUgaW5cbiAqIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG5cbi8qKlxuICogRGlzcGxheXMgYSBsb2FkaW5nIG5vdGlmaWNhdGlvbiB3aGlsZSB3YWl0aW5nIGZvciBhIHByb21pc2UuXG4gKiBXYWl0cyBkZWxheU1zIGJlZm9yZSBhY3R1YWxseSBzaG93aW5nIHRoZSBub3RpZmljYXRpb24gKHRvIHByZXZlbnQgZmxpY2tlcikuXG4gKi9cbmFzeW5jIGZ1bmN0aW9uIHdpdGhMb2FkaW5nTm90aWZpY2F0aW9uPFQ+KFxuICBwcm9taXNlOiBQcm9taXNlPFQ+LFxuICBtZXNzYWdlOiBzdHJpbmcsXG4gIGRlbGF5TXM6IG51bWJlciA9IDEwMCxcbiAgb3B0aW9uczogT2JqZWN0ID0ge30sXG4pOiBQcm9taXNlPFQ+IHtcbiAgbGV0IG5vdGlmID0gbnVsbDtcbiAgY29uc3QgdGltZW91dCA9IHNldFRpbWVvdXQoKCkgPT4ge1xuICAgIG5vdGlmID0gYXRvbS5ub3RpZmljYXRpb25zLmFkZEluZm8obWVzc2FnZSwge1xuICAgICAgZGlzbWlzc2FibGU6IHRydWUsXG4gICAgICAuLi5vcHRpb25zLFxuICAgIH0pO1xuICB9LCBkZWxheU1zKTtcbiAgdHJ5IHtcbiAgICByZXR1cm4gYXdhaXQgcHJvbWlzZTtcbiAgfSBmaW5hbGx5IHtcbiAgICBjbGVhclRpbWVvdXQodGltZW91dCk7XG4gICAgaWYgKG5vdGlmKSB7XG4gICAgICBub3RpZi5kaXNtaXNzKCk7XG4gICAgfVxuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gd2l0aExvYWRpbmdOb3RpZmljYXRpb247XG4iXX0=
