
/*
 * Copyright (c) 2015-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the license found in the LICENSE file in
 * the root directory of this source tree.
 */

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

var _require = require('atom');

var Disposable = _require.Disposable;

var _require2 = require('events');

var EventEmitter = _require2.EventEmitter;

var GRAMMAR_CHANGE_EVENT = 'grammar-change';

/**
 * A singleton that listens to grammar changes in all text editors.
 */

var GrammarForTextEditorsListener = (function () {
  function GrammarForTextEditorsListener() {
    var _this = this;

    _classCallCheck(this, GrammarForTextEditorsListener);

    this._emitter = new EventEmitter();
    this._grammarSubscriptionsMap = new Map();
    this._destroySubscriptionsMap = new Map();
    this._textEditorsSubscription = atom.workspace.observeTextEditors(function (textEditor) {
      var grammarSubscription = textEditor.observeGrammar(function (grammar) {
        _this._emitter.emit(GRAMMAR_CHANGE_EVENT, textEditor);
      });
      _this._grammarSubscriptionsMap.set(textEditor, grammarSubscription);

      var destroySubscription = textEditor.onDidDestroy(function () {
        var subscription = _this._grammarSubscriptionsMap.get(textEditor);
        if (subscription) {
          subscription.dispose();
          _this._grammarSubscriptionsMap['delete'](textEditor);
        }

        destroySubscription.dispose();
        _this._destroySubscriptionsMap['delete'](textEditor);
      });
      _this._destroySubscriptionsMap.set(textEditor, destroySubscription);
    });
  }

  _createClass(GrammarForTextEditorsListener, [{
    key: 'observeGrammarForTextEditors',
    value: function observeGrammarForTextEditors(fn) {
      var _this2 = this;

      function fnWithGrammar(textEditor) {
        fn(textEditor, textEditor.getGrammar());
      }

      // The event was already handled before `fn` was added to the emitter, so
      // we need to call it on all the existing editors.
      atom.workspace.getTextEditors().forEach(fnWithGrammar);
      this._emitter.addListener(GRAMMAR_CHANGE_EVENT, fnWithGrammar);
      return new Disposable(function () {
        _this2._emitter.removeListener(GRAMMAR_CHANGE_EVENT, fnWithGrammar);
      });
    }
  }, {
    key: 'dispose',
    value: function dispose() {
      this._emitter.removeAllListeners();
      this._grammarSubscriptionsMap.forEach(function (subscription) {
        return subscription.dispose();
      });
      this._grammarSubscriptionsMap.clear();
      this._destroySubscriptionsMap.forEach(function (subscription) {
        return subscription.dispose();
      });
      this._destroySubscriptionsMap.clear();
      this._textEditorsSubscription.dispose();
    }
  }]);

  return GrammarForTextEditorsListener;
})();

var listeners = new WeakMap();

module.exports =
/**
 * Use this to perform an action on every text editor with its latest grammar.
 *
 * @param fn This is called once for every text editor, and then again every
 * time it changes to a grammar.
 */
function observeGrammarForTextEditors(fn) {
  // The listener should be a global singleton but workspaces are destroyed
  // between each test run so we need to reinstantiate the listener to attach
  // to the current workspace.
  var listener = listeners.get(atom.workspace);
  if (!listener) {
    listener = new GrammarForTextEditorsListener();
    listeners.set(atom.workspace, listener);
  }
  return listener.observeGrammarForTextEditors(fn);
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi92YXIvZm9sZGVycy94Zi9yc3BoNF9jNTczMTVyczU3eHhzZHNrcnhudjM2dDAvVC90bXBwZmw1Mm5wdWJsaXNoX3BhY2thZ2VzL25wbS9udWNsaWRlLWF0b20taGVscGVycy9saWIvb2JzZXJ2ZS1ncmFtbWFyLWZvci10ZXh0LWVkaXRvcnMuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsV0FBVyxDQUFDOzs7Ozs7Ozs7Ozs7OztlQVdTLE9BQU8sQ0FBQyxNQUFNLENBQUM7O0lBQTdCLFVBQVUsWUFBVixVQUFVOztnQkFDTSxPQUFPLENBQUMsUUFBUSxDQUFDOztJQUFqQyxZQUFZLGFBQVosWUFBWTs7QUFFbkIsSUFBTSxvQkFBb0IsR0FBRyxnQkFBZ0IsQ0FBQzs7Ozs7O0lBS3hDLDZCQUE2QjtBQU10QixXQU5QLDZCQUE2QixHQU1uQjs7OzBCQU5WLDZCQUE2Qjs7QUFPL0IsUUFBSSxDQUFDLFFBQVEsR0FBRyxJQUFJLFlBQVksRUFBRSxDQUFDO0FBQ25DLFFBQUksQ0FBQyx3QkFBd0IsR0FBRyxJQUFJLEdBQUcsRUFBRSxDQUFDO0FBQzFDLFFBQUksQ0FBQyx3QkFBd0IsR0FBRyxJQUFJLEdBQUcsRUFBRSxDQUFDO0FBQzFDLFFBQUksQ0FBQyx3QkFBd0IsR0FBRyxJQUFJLENBQUMsU0FBUyxDQUFDLGtCQUFrQixDQUFDLFVBQUEsVUFBVSxFQUFJO0FBQzlFLFVBQU0sbUJBQW1CLEdBQUcsVUFBVSxDQUFDLGNBQWMsQ0FBQyxVQUFBLE9BQU8sRUFBSTtBQUMvRCxjQUFLLFFBQVEsQ0FBQyxJQUFJLENBQUMsb0JBQW9CLEVBQUUsVUFBVSxDQUFDLENBQUM7T0FDdEQsQ0FBQyxDQUFDO0FBQ0gsWUFBSyx3QkFBd0IsQ0FBQyxHQUFHLENBQUMsVUFBVSxFQUFFLG1CQUFtQixDQUFDLENBQUM7O0FBRW5FLFVBQU0sbUJBQW1CLEdBQUcsVUFBVSxDQUFDLFlBQVksQ0FBQyxZQUFNO0FBQ3hELFlBQU0sWUFBWSxHQUFHLE1BQUssd0JBQXdCLENBQUMsR0FBRyxDQUFDLFVBQVUsQ0FBQyxDQUFDO0FBQ25FLFlBQUksWUFBWSxFQUFFO0FBQ2hCLHNCQUFZLENBQUMsT0FBTyxFQUFFLENBQUM7QUFDdkIsZ0JBQUssd0JBQXdCLFVBQU8sQ0FBQyxVQUFVLENBQUMsQ0FBQztTQUNsRDs7QUFFRCwyQkFBbUIsQ0FBQyxPQUFPLEVBQUUsQ0FBQztBQUM5QixjQUFLLHdCQUF3QixVQUFPLENBQUMsVUFBVSxDQUFDLENBQUM7T0FDbEQsQ0FBQyxDQUFDO0FBQ0gsWUFBSyx3QkFBd0IsQ0FBQyxHQUFHLENBQUMsVUFBVSxFQUFFLG1CQUFtQixDQUFDLENBQUM7S0FDcEUsQ0FBQyxDQUFDO0dBQ0o7O2VBNUJHLDZCQUE2Qjs7V0E4Qkwsc0NBQzFCLEVBQTJELEVBQy9DOzs7QUFDWixlQUFTLGFBQWEsQ0FBQyxVQUFVLEVBQUU7QUFDakMsVUFBRSxDQUFDLFVBQVUsRUFBRSxVQUFVLENBQUMsVUFBVSxFQUFFLENBQUMsQ0FBQztPQUN6Qzs7OztBQUlELFVBQUksQ0FBQyxTQUFTLENBQUMsY0FBYyxFQUFFLENBQUMsT0FBTyxDQUFDLGFBQWEsQ0FBQyxDQUFDO0FBQ3ZELFVBQUksQ0FBQyxRQUFRLENBQUMsV0FBVyxDQUFDLG9CQUFvQixFQUFFLGFBQWEsQ0FBQyxDQUFDO0FBQy9ELGFBQU8sSUFBSSxVQUFVLENBQUMsWUFBTTtBQUMxQixlQUFLLFFBQVEsQ0FBQyxjQUFjLENBQUMsb0JBQW9CLEVBQUUsYUFBYSxDQUFDLENBQUM7T0FDbkUsQ0FBQyxDQUFDO0tBQ0o7OztXQUVNLG1CQUFTO0FBQ2QsVUFBSSxDQUFDLFFBQVEsQ0FBQyxrQkFBa0IsRUFBRSxDQUFDO0FBQ25DLFVBQUksQ0FBQyx3QkFBd0IsQ0FBQyxPQUFPLENBQUMsVUFBQSxZQUFZO2VBQUksWUFBWSxDQUFDLE9BQU8sRUFBRTtPQUFBLENBQUMsQ0FBQztBQUM5RSxVQUFJLENBQUMsd0JBQXdCLENBQUMsS0FBSyxFQUFFLENBQUM7QUFDdEMsVUFBSSxDQUFDLHdCQUF3QixDQUFDLE9BQU8sQ0FBQyxVQUFBLFlBQVk7ZUFBSSxZQUFZLENBQUMsT0FBTyxFQUFFO09BQUEsQ0FBQyxDQUFDO0FBQzlFLFVBQUksQ0FBQyx3QkFBd0IsQ0FBQyxLQUFLLEVBQUUsQ0FBQztBQUN0QyxVQUFJLENBQUMsd0JBQXdCLENBQUMsT0FBTyxFQUFFLENBQUM7S0FDekM7OztTQXJERyw2QkFBNkI7OztBQXdEbkMsSUFBTSxTQUFpRSxHQUFHLElBQUksT0FBTyxFQUFFLENBQUM7O0FBRXhGLE1BQU0sQ0FBQyxPQUFPOzs7Ozs7O0FBT2QsU0FBUyw0QkFBNEIsQ0FDbkMsRUFBMkQsRUFDekM7Ozs7QUFJbEIsTUFBSSxRQUFRLEdBQUcsU0FBUyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUM7QUFDN0MsTUFBSSxDQUFDLFFBQVEsRUFBRTtBQUNiLFlBQVEsR0FBRyxJQUFJLDZCQUE2QixFQUFFLENBQUM7QUFDL0MsYUFBUyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsU0FBUyxFQUFFLFFBQVEsQ0FBQyxDQUFDO0dBQ3pDO0FBQ0QsU0FBTyxRQUFRLENBQUMsNEJBQTRCLENBQUMsRUFBRSxDQUFDLENBQUM7Q0FDbEQsQ0FBQyIsImZpbGUiOiIvdmFyL2ZvbGRlcnMveGYvcnNwaDRfYzU3MzE1cnM1N3h4c2Rza3J4bnYzNnQwL1QvdG1wcGZsNTJucHVibGlzaF9wYWNrYWdlcy9ucG0vbnVjbGlkZS1hdG9tLWhlbHBlcnMvbGliL29ic2VydmUtZ3JhbW1hci1mb3ItdGV4dC1lZGl0b3JzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBiYWJlbCc7XG4vKiBAZmxvdyAqL1xuXG4vKlxuICogQ29weXJpZ2h0IChjKSAyMDE1LXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIGxpY2Vuc2UgZm91bmQgaW4gdGhlIExJQ0VOU0UgZmlsZSBpblxuICogdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cblxuY29uc3Qge0Rpc3Bvc2FibGV9ID0gcmVxdWlyZSgnYXRvbScpO1xuY29uc3Qge0V2ZW50RW1pdHRlcn0gPSByZXF1aXJlKCdldmVudHMnKTtcblxuY29uc3QgR1JBTU1BUl9DSEFOR0VfRVZFTlQgPSAnZ3JhbW1hci1jaGFuZ2UnO1xuXG4vKipcbiAqIEEgc2luZ2xldG9uIHRoYXQgbGlzdGVucyB0byBncmFtbWFyIGNoYW5nZXMgaW4gYWxsIHRleHQgZWRpdG9ycy5cbiAqL1xuY2xhc3MgR3JhbW1hckZvclRleHRFZGl0b3JzTGlzdGVuZXIge1xuICBfZW1pdHRlcjogRXZlbnRFbWl0dGVyO1xuICBfZ3JhbW1hclN1YnNjcmlwdGlvbnNNYXA6IE1hcDxUZXh0RWRpdG9yLCBhdG9tJERpc3Bvc2FibGU+O1xuICBfZGVzdHJveVN1YnNjcmlwdGlvbnNNYXA6IE1hcDxUZXh0RWRpdG9yLCBhdG9tJERpc3Bvc2FibGU+O1xuICBfdGV4dEVkaXRvcnNTdWJzY3JpcHRpb246IGF0b20kRGlzcG9zYWJsZTtcblxuICBjb25zdHJ1Y3RvcigpIHtcbiAgICB0aGlzLl9lbWl0dGVyID0gbmV3IEV2ZW50RW1pdHRlcigpO1xuICAgIHRoaXMuX2dyYW1tYXJTdWJzY3JpcHRpb25zTWFwID0gbmV3IE1hcCgpO1xuICAgIHRoaXMuX2Rlc3Ryb3lTdWJzY3JpcHRpb25zTWFwID0gbmV3IE1hcCgpO1xuICAgIHRoaXMuX3RleHRFZGl0b3JzU3Vic2NyaXB0aW9uID0gYXRvbS53b3Jrc3BhY2Uub2JzZXJ2ZVRleHRFZGl0b3JzKHRleHRFZGl0b3IgPT4ge1xuICAgICAgY29uc3QgZ3JhbW1hclN1YnNjcmlwdGlvbiA9IHRleHRFZGl0b3Iub2JzZXJ2ZUdyYW1tYXIoZ3JhbW1hciA9PiB7XG4gICAgICAgIHRoaXMuX2VtaXR0ZXIuZW1pdChHUkFNTUFSX0NIQU5HRV9FVkVOVCwgdGV4dEVkaXRvcik7XG4gICAgICB9KTtcbiAgICAgIHRoaXMuX2dyYW1tYXJTdWJzY3JpcHRpb25zTWFwLnNldCh0ZXh0RWRpdG9yLCBncmFtbWFyU3Vic2NyaXB0aW9uKTtcblxuICAgICAgY29uc3QgZGVzdHJveVN1YnNjcmlwdGlvbiA9IHRleHRFZGl0b3Iub25EaWREZXN0cm95KCgpID0+IHtcbiAgICAgICAgY29uc3Qgc3Vic2NyaXB0aW9uID0gdGhpcy5fZ3JhbW1hclN1YnNjcmlwdGlvbnNNYXAuZ2V0KHRleHRFZGl0b3IpO1xuICAgICAgICBpZiAoc3Vic2NyaXB0aW9uKSB7XG4gICAgICAgICAgc3Vic2NyaXB0aW9uLmRpc3Bvc2UoKTtcbiAgICAgICAgICB0aGlzLl9ncmFtbWFyU3Vic2NyaXB0aW9uc01hcC5kZWxldGUodGV4dEVkaXRvcik7XG4gICAgICAgIH1cblxuICAgICAgICBkZXN0cm95U3Vic2NyaXB0aW9uLmRpc3Bvc2UoKTtcbiAgICAgICAgdGhpcy5fZGVzdHJveVN1YnNjcmlwdGlvbnNNYXAuZGVsZXRlKHRleHRFZGl0b3IpO1xuICAgICAgfSk7XG4gICAgICB0aGlzLl9kZXN0cm95U3Vic2NyaXB0aW9uc01hcC5zZXQodGV4dEVkaXRvciwgZGVzdHJveVN1YnNjcmlwdGlvbik7XG4gICAgfSk7XG4gIH1cblxuICBvYnNlcnZlR3JhbW1hckZvclRleHRFZGl0b3JzKFxuICAgIGZuOiAodGV4dEVkaXRvcjogVGV4dEVkaXRvciwgZ3JhbW1hcjogYXRvbSRHcmFtbWFyKSA9PiB2b2lkLFxuICApOiBEaXNwb3NhYmxlIHtcbiAgICBmdW5jdGlvbiBmbldpdGhHcmFtbWFyKHRleHRFZGl0b3IpIHtcbiAgICAgIGZuKHRleHRFZGl0b3IsIHRleHRFZGl0b3IuZ2V0R3JhbW1hcigpKTtcbiAgICB9XG5cbiAgICAvLyBUaGUgZXZlbnQgd2FzIGFscmVhZHkgaGFuZGxlZCBiZWZvcmUgYGZuYCB3YXMgYWRkZWQgdG8gdGhlIGVtaXR0ZXIsIHNvXG4gICAgLy8gd2UgbmVlZCB0byBjYWxsIGl0IG9uIGFsbCB0aGUgZXhpc3RpbmcgZWRpdG9ycy5cbiAgICBhdG9tLndvcmtzcGFjZS5nZXRUZXh0RWRpdG9ycygpLmZvckVhY2goZm5XaXRoR3JhbW1hcik7XG4gICAgdGhpcy5fZW1pdHRlci5hZGRMaXN0ZW5lcihHUkFNTUFSX0NIQU5HRV9FVkVOVCwgZm5XaXRoR3JhbW1hcik7XG4gICAgcmV0dXJuIG5ldyBEaXNwb3NhYmxlKCgpID0+IHtcbiAgICAgIHRoaXMuX2VtaXR0ZXIucmVtb3ZlTGlzdGVuZXIoR1JBTU1BUl9DSEFOR0VfRVZFTlQsIGZuV2l0aEdyYW1tYXIpO1xuICAgIH0pO1xuICB9XG5cbiAgZGlzcG9zZSgpOiB2b2lkIHtcbiAgICB0aGlzLl9lbWl0dGVyLnJlbW92ZUFsbExpc3RlbmVycygpO1xuICAgIHRoaXMuX2dyYW1tYXJTdWJzY3JpcHRpb25zTWFwLmZvckVhY2goc3Vic2NyaXB0aW9uID0+IHN1YnNjcmlwdGlvbi5kaXNwb3NlKCkpO1xuICAgIHRoaXMuX2dyYW1tYXJTdWJzY3JpcHRpb25zTWFwLmNsZWFyKCk7XG4gICAgdGhpcy5fZGVzdHJveVN1YnNjcmlwdGlvbnNNYXAuZm9yRWFjaChzdWJzY3JpcHRpb24gPT4gc3Vic2NyaXB0aW9uLmRpc3Bvc2UoKSk7XG4gICAgdGhpcy5fZGVzdHJveVN1YnNjcmlwdGlvbnNNYXAuY2xlYXIoKTtcbiAgICB0aGlzLl90ZXh0RWRpdG9yc1N1YnNjcmlwdGlvbi5kaXNwb3NlKCk7XG4gIH1cbn1cblxuY29uc3QgbGlzdGVuZXJzOiBXZWFrTWFwPGF0b20kV29ya3NwYWNlLCBHcmFtbWFyRm9yVGV4dEVkaXRvcnNMaXN0ZW5lcj4gPSBuZXcgV2Vha01hcCgpO1xuXG5tb2R1bGUuZXhwb3J0cyA9XG4vKipcbiAqIFVzZSB0aGlzIHRvIHBlcmZvcm0gYW4gYWN0aW9uIG9uIGV2ZXJ5IHRleHQgZWRpdG9yIHdpdGggaXRzIGxhdGVzdCBncmFtbWFyLlxuICpcbiAqIEBwYXJhbSBmbiBUaGlzIGlzIGNhbGxlZCBvbmNlIGZvciBldmVyeSB0ZXh0IGVkaXRvciwgYW5kIHRoZW4gYWdhaW4gZXZlcnlcbiAqIHRpbWUgaXQgY2hhbmdlcyB0byBhIGdyYW1tYXIuXG4gKi9cbmZ1bmN0aW9uIG9ic2VydmVHcmFtbWFyRm9yVGV4dEVkaXRvcnMoXG4gIGZuOiAodGV4dEVkaXRvcjogVGV4dEVkaXRvciwgZ3JhbW1hcjogYXRvbSRHcmFtbWFyKSA9PiB2b2lkLFxuKTogYXRvbSRJRGlzcG9zYWJsZSB7XG4gIC8vIFRoZSBsaXN0ZW5lciBzaG91bGQgYmUgYSBnbG9iYWwgc2luZ2xldG9uIGJ1dCB3b3Jrc3BhY2VzIGFyZSBkZXN0cm95ZWRcbiAgLy8gYmV0d2VlbiBlYWNoIHRlc3QgcnVuIHNvIHdlIG5lZWQgdG8gcmVpbnN0YW50aWF0ZSB0aGUgbGlzdGVuZXIgdG8gYXR0YWNoXG4gIC8vIHRvIHRoZSBjdXJyZW50IHdvcmtzcGFjZS5cbiAgbGV0IGxpc3RlbmVyID0gbGlzdGVuZXJzLmdldChhdG9tLndvcmtzcGFjZSk7XG4gIGlmICghbGlzdGVuZXIpIHtcbiAgICBsaXN0ZW5lciA9IG5ldyBHcmFtbWFyRm9yVGV4dEVkaXRvcnNMaXN0ZW5lcigpO1xuICAgIGxpc3RlbmVycy5zZXQoYXRvbS53b3Jrc3BhY2UsIGxpc3RlbmVyKTtcbiAgfVxuICByZXR1cm4gbGlzdGVuZXIub2JzZXJ2ZUdyYW1tYXJGb3JUZXh0RWRpdG9ycyhmbik7XG59O1xuIl19
