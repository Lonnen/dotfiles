
/*
 * Copyright (c) 2015-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the license found in the LICENSE file in
 * the root directory of this source tree.
 */

/**
 * Often, we may want to respond to Atom events, but only after a buffer period
 * of no change.
 * For example, Atom provides Workspace::onDidChangeActivePaneItem, but we may
 * want to know not when the active pane item has changed, buth when it has
 * stopped changing.
 * This file provides methods to do this.
 */

var _require = require('nuclide-commons');

var debounce = _require.debounce;

var DEFAULT_DEBOUNCE_INTERVAL_MS = 100;

/**
 * Similar to Atom's Workspace::onDidChangeActivePaneItem
 * (https://atom.io/docs/api/v1.0.2/Workspace#instance-onDidChangeActivePaneItem),
 * with the addition of a debounce interval.
 * @param debounceInterval The number of milliseconds to debounce.
 */
function onWorkspaceDidStopChangingActivePaneItem(callback) {
  var debounceInterval = arguments.length <= 1 || arguments[1] === undefined ? DEFAULT_DEBOUNCE_INTERVAL_MS : arguments[1];

  var debouncedFunction = debounce(callback, debounceInterval, /* immediate */false);
  return atom.workspace.onDidChangeActivePaneItem(debouncedFunction);
}

module.exports = {
  onWorkspaceDidStopChangingActivePaneItem: onWorkspaceDidStopChangingActivePaneItem
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi92YXIvZm9sZGVycy94Zi9yc3BoNF9jNTczMTVyczU3eHhzZHNrcnhudjM2dDAvVC90bXBwZmw1Mm5wdWJsaXNoX3BhY2thZ2VzL25wbS9udWNsaWRlLWF0b20taGVscGVycy9saWIvYXRvbS1ldmVudC1kZWJvdW5jZS5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxXQUFXLENBQUM7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7ZUFvQk8sT0FBTyxDQUFDLGlCQUFpQixDQUFDOztJQUF0QyxRQUFRLFlBQVIsUUFBUTs7QUFFZixJQUFNLDRCQUE0QixHQUFHLEdBQUcsQ0FBQzs7Ozs7Ozs7QUFRekMsU0FBUyx3Q0FBd0MsQ0FDN0MsUUFBOEIsRUFFYjtNQURqQixnQkFBd0IseURBQUcsNEJBQTRCOztBQUV6RCxNQUFNLGlCQUFpQixHQUFHLFFBQVEsQ0FBQyxRQUFRLEVBQUUsZ0JBQWdCLGlCQUFrQixLQUFLLENBQUMsQ0FBQztBQUN0RixTQUFPLElBQUksQ0FBQyxTQUFTLENBQUMseUJBQXlCLENBQUMsaUJBQWlCLENBQUMsQ0FBQztDQUNwRTs7QUFFRCxNQUFNLENBQUMsT0FBTyxHQUFHO0FBQ2YsMENBQXdDLEVBQXhDLHdDQUF3QztDQUN6QyxDQUFDIiwiZmlsZSI6Ii92YXIvZm9sZGVycy94Zi9yc3BoNF9jNTczMTVyczU3eHhzZHNrcnhudjM2dDAvVC90bXBwZmw1Mm5wdWJsaXNoX3BhY2thZ2VzL25wbS9udWNsaWRlLWF0b20taGVscGVycy9saWIvYXRvbS1ldmVudC1kZWJvdW5jZS5qcyIsInNvdXJjZXNDb250ZW50IjpbIid1c2UgYmFiZWwnO1xuLyogQGZsb3cgKi9cblxuLypcbiAqIENvcHlyaWdodCAoYykgMjAxNS1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBsaWNlbnNlIGZvdW5kIGluIHRoZSBMSUNFTlNFIGZpbGUgaW5cbiAqIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG5cbi8qKlxuICogT2Z0ZW4sIHdlIG1heSB3YW50IHRvIHJlc3BvbmQgdG8gQXRvbSBldmVudHMsIGJ1dCBvbmx5IGFmdGVyIGEgYnVmZmVyIHBlcmlvZFxuICogb2Ygbm8gY2hhbmdlLlxuICogRm9yIGV4YW1wbGUsIEF0b20gcHJvdmlkZXMgV29ya3NwYWNlOjpvbkRpZENoYW5nZUFjdGl2ZVBhbmVJdGVtLCBidXQgd2UgbWF5XG4gKiB3YW50IHRvIGtub3cgbm90IHdoZW4gdGhlIGFjdGl2ZSBwYW5lIGl0ZW0gaGFzIGNoYW5nZWQsIGJ1dGggd2hlbiBpdCBoYXNcbiAqIHN0b3BwZWQgY2hhbmdpbmcuXG4gKiBUaGlzIGZpbGUgcHJvdmlkZXMgbWV0aG9kcyB0byBkbyB0aGlzLlxuICovXG5cbmNvbnN0IHtkZWJvdW5jZX0gPSByZXF1aXJlKCdudWNsaWRlLWNvbW1vbnMnKTtcblxuY29uc3QgREVGQVVMVF9ERUJPVU5DRV9JTlRFUlZBTF9NUyA9IDEwMDtcblxuLyoqXG4gKiBTaW1pbGFyIHRvIEF0b20ncyBXb3Jrc3BhY2U6Om9uRGlkQ2hhbmdlQWN0aXZlUGFuZUl0ZW1cbiAqIChodHRwczovL2F0b20uaW8vZG9jcy9hcGkvdjEuMC4yL1dvcmtzcGFjZSNpbnN0YW5jZS1vbkRpZENoYW5nZUFjdGl2ZVBhbmVJdGVtKSxcbiAqIHdpdGggdGhlIGFkZGl0aW9uIG9mIGEgZGVib3VuY2UgaW50ZXJ2YWwuXG4gKiBAcGFyYW0gZGVib3VuY2VJbnRlcnZhbCBUaGUgbnVtYmVyIG9mIG1pbGxpc2Vjb25kcyB0byBkZWJvdW5jZS5cbiAqL1xuZnVuY3Rpb24gb25Xb3Jrc3BhY2VEaWRTdG9wQ2hhbmdpbmdBY3RpdmVQYW5lSXRlbShcbiAgICBjYWxsYmFjazogKGl0ZW06IG1peGVkKSA9PiBhbnksXG4gICAgZGVib3VuY2VJbnRlcnZhbDogbnVtYmVyID0gREVGQVVMVF9ERUJPVU5DRV9JTlRFUlZBTF9NU1xuICApOiBhdG9tJERpc3Bvc2FibGUge1xuICBjb25zdCBkZWJvdW5jZWRGdW5jdGlvbiA9IGRlYm91bmNlKGNhbGxiYWNrLCBkZWJvdW5jZUludGVydmFsLCAvKiBpbW1lZGlhdGUgKi8gZmFsc2UpO1xuICByZXR1cm4gYXRvbS53b3Jrc3BhY2Uub25EaWRDaGFuZ2VBY3RpdmVQYW5lSXRlbShkZWJvdW5jZWRGdW5jdGlvbik7XG59XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBvbldvcmtzcGFjZURpZFN0b3BDaGFuZ2luZ0FjdGl2ZVBhbmVJdGVtLFxufTtcbiJdfQ==
