
/*
 * Copyright (c) 2015-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the license found in the LICENSE file in
 * the root directory of this source tree.
 */

Object.defineProperty(exports, '__esModule', {
  value: true
});
exports.isTextEditor = isTextEditor;
exports.createTextEditor = createTextEditor;

function isTextEditor(item) {
  if (item == null) {
    return false;
  } else if (typeof atom.workspace.buildTextEditor === 'function') {
    // If buildTextEditor is present, then accessing the TextEditor constructor will trigger a
    // deprecation warning. Atom recommends testing for the existence of the public method of
    // TextEditor that you are using as a proxy for whether the object is a TextEditor:
    // https://github.com/atom/atom/commit/4d2d4c3. This is a fairly weak heuristic, so we test
    // for a larger set of methods that are more likely unique to TextEditor as a better heuristic:
    return typeof item.screenPositionForBufferPosition === 'function' && typeof item.scanInBufferRange === 'function' && typeof item.scopeDescriptorForBufferPosition === 'function';
  } else {
    var _require = require('atom');

    var _TextEditor = _require.TextEditor;

    return item instanceof _TextEditor;
  }
}

function createTextEditor(textEditorParams) {
  // Note that atom.workspace.buildTextEditor was introduced after the release of Atom 1.0.19.
  // As of this change, calling the constructor of TextEditor directly is deprecated. Therefore,
  // we must choose the appropriate code path based on which API is available.
  if (atom.workspace.buildTextEditor) {
    return atom.workspace.buildTextEditor(textEditorParams);
  } else {
    var _require2 = require('atom');

    var _TextEditor2 = _require2.TextEditor;

    return new _TextEditor2(textEditorParams);
  }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi92YXIvZm9sZGVycy94Zi9yc3BoNF9jNTczMTVyczU3eHhzZHNrcnhudjM2dDAvVC90bXBwZmw1Mm5wdWJsaXNoX3BhY2thZ2VzL25wbS9udWNsaWRlLWF0b20taGVscGVycy9saWIvdGV4dC1lZGl0b3IuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsV0FBVyxDQUFDOzs7Ozs7Ozs7Ozs7Ozs7O0FBV0wsU0FBUyxZQUFZLENBQUMsSUFBVSxFQUFXO0FBQ2hELE1BQUksSUFBSSxJQUFJLElBQUksRUFBRTtBQUNoQixXQUFPLEtBQUssQ0FBQztHQUNkLE1BQU0sSUFBSSxPQUFPLElBQUksQ0FBQyxTQUFTLENBQUMsZUFBZSxLQUFLLFVBQVUsRUFBRTs7Ozs7O0FBTS9ELFdBQU8sT0FBTyxJQUFJLENBQUMsK0JBQStCLEtBQUssVUFBVSxJQUMvRCxPQUFPLElBQUksQ0FBQyxpQkFBaUIsS0FBSyxVQUFVLElBQzVDLE9BQU8sSUFBSSxDQUFDLGdDQUFnQyxLQUFLLFVBQVUsQ0FBQztHQUMvRCxNQUFNO21CQUNnQixPQUFPLENBQUMsTUFBTSxDQUFDOztRQUE3QixXQUFVLFlBQVYsVUFBVTs7QUFDakIsV0FBTyxJQUFJLFlBQVksV0FBVSxDQUFDO0dBQ25DO0NBQ0Y7O0FBRU0sU0FBUyxnQkFBZ0IsQ0FBQyxnQkFBdUMsRUFBYzs7OztBQUlwRixNQUFJLElBQUksQ0FBQyxTQUFTLENBQUMsZUFBZSxFQUFFO0FBQ2xDLFdBQU8sSUFBSSxDQUFDLFNBQVMsQ0FBQyxlQUFlLENBQUMsZ0JBQWdCLENBQUMsQ0FBQztHQUN6RCxNQUFNO29CQUNnQixPQUFPLENBQUMsTUFBTSxDQUFDOztRQUE3QixZQUFVLGFBQVYsVUFBVTs7QUFDakIsV0FBTyxJQUFJLFlBQVUsQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDO0dBQ3pDO0NBQ0YiLCJmaWxlIjoiL3Zhci9mb2xkZXJzL3hmL3JzcGg0X2M1NzMxNXJzNTd4eHNkc2tyeG52MzZ0MC9UL3RtcHBmbDUybnB1Ymxpc2hfcGFja2FnZXMvbnBtL251Y2xpZGUtYXRvbS1oZWxwZXJzL2xpYi90ZXh0LWVkaXRvci5qcyIsInNvdXJjZXNDb250ZW50IjpbIid1c2UgYmFiZWwnO1xuLyogQGZsb3cgKi9cblxuLypcbiAqIENvcHlyaWdodCAoYykgMjAxNS1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBsaWNlbnNlIGZvdW5kIGluIHRoZSBMSUNFTlNFIGZpbGUgaW5cbiAqIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBpc1RleHRFZGl0b3IoaXRlbTogP2FueSk6IGJvb2xlYW4ge1xuICBpZiAoaXRlbSA9PSBudWxsKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9IGVsc2UgaWYgKHR5cGVvZiBhdG9tLndvcmtzcGFjZS5idWlsZFRleHRFZGl0b3IgPT09ICdmdW5jdGlvbicpIHtcbiAgICAvLyBJZiBidWlsZFRleHRFZGl0b3IgaXMgcHJlc2VudCwgdGhlbiBhY2Nlc3NpbmcgdGhlIFRleHRFZGl0b3IgY29uc3RydWN0b3Igd2lsbCB0cmlnZ2VyIGFcbiAgICAvLyBkZXByZWNhdGlvbiB3YXJuaW5nLiBBdG9tIHJlY29tbWVuZHMgdGVzdGluZyBmb3IgdGhlIGV4aXN0ZW5jZSBvZiB0aGUgcHVibGljIG1ldGhvZCBvZlxuICAgIC8vIFRleHRFZGl0b3IgdGhhdCB5b3UgYXJlIHVzaW5nIGFzIGEgcHJveHkgZm9yIHdoZXRoZXIgdGhlIG9iamVjdCBpcyBhIFRleHRFZGl0b3I6XG4gICAgLy8gaHR0cHM6Ly9naXRodWIuY29tL2F0b20vYXRvbS9jb21taXQvNGQyZDRjMy4gVGhpcyBpcyBhIGZhaXJseSB3ZWFrIGhldXJpc3RpYywgc28gd2UgdGVzdFxuICAgIC8vIGZvciBhIGxhcmdlciBzZXQgb2YgbWV0aG9kcyB0aGF0IGFyZSBtb3JlIGxpa2VseSB1bmlxdWUgdG8gVGV4dEVkaXRvciBhcyBhIGJldHRlciBoZXVyaXN0aWM6XG4gICAgcmV0dXJuIHR5cGVvZiBpdGVtLnNjcmVlblBvc2l0aW9uRm9yQnVmZmVyUG9zaXRpb24gPT09ICdmdW5jdGlvbicgJiZcbiAgICAgIHR5cGVvZiBpdGVtLnNjYW5JbkJ1ZmZlclJhbmdlID09PSAnZnVuY3Rpb24nICYmXG4gICAgICB0eXBlb2YgaXRlbS5zY29wZURlc2NyaXB0b3JGb3JCdWZmZXJQb3NpdGlvbiA9PT0gJ2Z1bmN0aW9uJztcbiAgfSBlbHNlIHtcbiAgICBjb25zdCB7VGV4dEVkaXRvcn0gPSByZXF1aXJlKCdhdG9tJyk7XG4gICAgcmV0dXJuIGl0ZW0gaW5zdGFuY2VvZiBUZXh0RWRpdG9yO1xuICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVUZXh0RWRpdG9yKHRleHRFZGl0b3JQYXJhbXM6IGF0b20kVGV4dEVkaXRvclBhcmFtcyk6IFRleHRFZGl0b3Ige1xuICAvLyBOb3RlIHRoYXQgYXRvbS53b3Jrc3BhY2UuYnVpbGRUZXh0RWRpdG9yIHdhcyBpbnRyb2R1Y2VkIGFmdGVyIHRoZSByZWxlYXNlIG9mIEF0b20gMS4wLjE5LlxuICAvLyBBcyBvZiB0aGlzIGNoYW5nZSwgY2FsbGluZyB0aGUgY29uc3RydWN0b3Igb2YgVGV4dEVkaXRvciBkaXJlY3RseSBpcyBkZXByZWNhdGVkLiBUaGVyZWZvcmUsXG4gIC8vIHdlIG11c3QgY2hvb3NlIHRoZSBhcHByb3ByaWF0ZSBjb2RlIHBhdGggYmFzZWQgb24gd2hpY2ggQVBJIGlzIGF2YWlsYWJsZS5cbiAgaWYgKGF0b20ud29ya3NwYWNlLmJ1aWxkVGV4dEVkaXRvcikge1xuICAgIHJldHVybiBhdG9tLndvcmtzcGFjZS5idWlsZFRleHRFZGl0b3IodGV4dEVkaXRvclBhcmFtcyk7XG4gIH0gZWxzZSB7XG4gICAgY29uc3Qge1RleHRFZGl0b3J9ID0gcmVxdWlyZSgnYXRvbScpO1xuICAgIHJldHVybiBuZXcgVGV4dEVkaXRvcih0ZXh0RWRpdG9yUGFyYW1zKTtcbiAgfVxufVxuIl19
