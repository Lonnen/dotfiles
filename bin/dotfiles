#!/bin/zsh
# shellcheck shell=bash
#
# This script may be initially run via curl:
#   sh -c "$(curl -fsSL https://raw.github.com/lonnen/dotfiles/master/bin/dotfiles)"
# or via wget:
#   wget -qO- https://raw.github.com/lonnen/dotfiles/master/bin/dotfiles
#   sh dotfiles
#
# Respects the following environment variables:
#   DOTFILES - path to the Dotfiles repository folder
#

set -e

[[ "$1" == "source" ]] || echo '.files'

usage() {
  cat <<HELP

  Usage: $(basename "$0") [options]

  Options:

    -h, --help              This message

  See the README for documentation.
  https://github.com/lonnen/dotfiles

  Licensed under the MIT license.
  http://opensource.org/licenses/MIT
HELP
}

# Generally useful functions

# Where the magic happens.
export DOTFILES=~/.dotfiles

# Logging stuff.
e_header()   { echo -e "\n\033[1m$*\033[0m"; }
e_success()  { echo -e " \033[1;32m✔\033[0m  $*"; }
e_error()    { echo -e " \033[1;31m✖\033[0m  $*"; }
e_arrow()    { echo -e " \033[1;33m➜\033[0m  $*"; }

# OS detection
is_osx() {
  [[ "$OSTYPE" =~ ^darwin ]] || return 1
}

is_xcode_installed() {
  # detect if the xcode tools are installed
  # this method should be good for  10.10 Yosemite to 10.15 Catalina
  # see: https://stackoverflow.com/questions/15371925/how-to-check-if-xcode-command-line-tools-are-installed
  [[ $(xcode-select -p) ]] || return 1
}

# Given strings containing space-delimited words A and B, "setdiff A B" will
# return all words in A that do not exist in B. Arrays in bash are insane
# (and not in a good way).
# From http://stackoverflow.com/a/1617303/142339
setdiff() {
  local debug skip a b
  if [[ "$1" == 1 ]]; then debug=1; shift; fi
  if [[ "$1" ]]; then
    local setdiffA setdiffB setdiffC
    setdiffA=("$1"); setdiffB=("$2")
  fi
  setdiffC=()
  for a in "${setdiffA[@]}"; do
    skip=
    for b in "${setdiffB[@]}"; do
      [[ "$a" == "$b" ]] && skip=1 && break
    done
    [[ "$skip" ]] || setdiffC=("${setdiffC[@]}" "$a")
  done
  [[ "$debug" ]] && for a in setdiffA setdiffB setdiffC; do
    echo "$a ($(eval echo "\${#$a[*]}")) $(eval echo "\${$a[*]}")" 1>&2
  done
  [[ "$1" ]] && echo "${setdiffC[@]}"
}

case $1 in
  source)
    # if this file was being sourced, all the functions are set up now
    return 0
    ;;
  -h|--help)
    usage
    exit 0
    ;;
esac

# OSX only
if ! is_osx; then
  exit 1
fi

# Given a list of desired items and installed items, return a list
# of uninstalled items. Arrays in bash are insane (not in a good way).
to_install() {
  local debug desired installed i desired_s installed_s remain
  if [[ "$1" == 1 ]]; then debug=1; shift; fi
  # Convert args to arrays, handling both space- and newline-separated lists.
  read -ra desired < <(echo "$1" | tr '\n' ' ')
  read -ra installed < <(echo "$2" | tr '\n' ' ')
  # Sort desired and installed arrays.
  unset i; while read -r; do desired_s[i++]=$REPLY; done < <(
    printf "%s\n" "${desired[@]}" | sort
  )
  unset i; while read -r; do installed_s[i++]=$REPLY; done < <(
    printf "%s\n" "${installed[@]}" | sort
  )
  # Get the difference. comm is awesome.
  unset i; while read -r; do remain[i++]=$REPLY; done < <(
    comm -13 <(printf "%s\n" "${installed_s[@]}") <(printf "%s\n" "${desired_s[@]}")
  )
  [[ "$debug" ]] && for v in desired desired_s installed installed_s remain; do
    echo "$v ($(eval echo "\${#$v[*]}")) $(eval echo "\${$v[*]}")"
  done
  echo "${remain[@]}"
}

# Initialize.
init_do() {
  e_header "Sourcing $(basename "$2")"
  source "$2"
}

# Offer the user a chance to skip something.
skip() {
  REPLY=noskip
  read -t 5 -n 1 -s -p "To skip, press X within 5 seconds. "
  if [[ "$REPLY" =~ ^[Xx]$ ]]; then
    echo "Skipping!"
  else
    echo "Continuing..."
    return 1
  fi
}

# Copy files.
copy_header() {
  e_header "Copying files into home directory"
}

copy_test() {
  if [[ -e "$2" && ! "$(cmp "$1" "$2" 2> /dev/null)" ]]; then
    echo "same file"
  elif [[ "$1" -ot "$2" ]]; then
    echo "destination file newer"
  fi
}

copy_do() {
  e_success "Copying ~/$1."
  cp "$2" ~/
}

# Link files.
link_header() {
  e_header "Linking files into home directory"
}

link_test() {
  [[ "$1" -ef "$2" ]] && echo "same file"
}

link_do() {
  e_success "Linking ~/$1."
  ln -sf "${2#$HOME/}" ~/
}

# Copy, link, init, etc.
do_stuff() {
  local base dest skip
  # allow a second arg to specify an alternate folder for the same function
  if [[ -n $2 ]]; then
    local files=("~/.dotfiles/$2/*")
  else
    local files=("~/.dotfiles/$1/*")
  fi
  [[ $(declare -f "$1_files") ]] && files=($("$1_files" "${files[@]}"))
  # No files? abort.
  if (( ${#files[@]} == 0 )); then return; fi
  # Run _header function only if declared.
  [[ $(declare -f "$1_header") ]] && "$1_header"
  # Iterate over files.
  for file in "${files[@]}"; do
    base=$(basename "$file")
    dest="$HOME/$base"
    # Run _test function only if declared.
    if [[ $(declare -f "$1_test") ]]; then
      # If _test function returns a string, skip file and print that message.
      skip="$("$1_test" "$file" "$dest")"
      if [[ "$skip" ]]; then
        e_error "Skipping ~/$base, $skip."
        continue
      fi
      # Destination file already exists in ~/. Back it up!
      if [[ -e "$dest" ]]; then
        e_arrow "Backing up ~/$base."
        # Set backup flag, so a nice message can be shown at the end.
        backup=1
        # Create backup dir if it doesn't already exist.
        [[ -e "$backup_dir" ]] || mkdir -p "$backup_dir"
        # Backup file / link / whatever.
        mv "$dest" "$backup_dir"
      fi
    fi
    # Do stuff.
    "$1_do" "$base" "$file"
  done
}

# Enough with the functions, let's do stuff.

# Ensure that we can actually, like, compile anything.
if ! is_xcode_installed; then
  e_error "The XCode Command Line Tools must be installed first."
  exit 1
fi

# Update existing sudo time stamp if set, otherwise do nothing.
while true; do sudo -n true; sleep 60; kill -0 "$$" || exit; done 2>/dev/null &

# Initialize.
if [[ ! -d $DOTFILES ]]; then
  new_dotfiles_install=1
  # ~/.dotfiles doesn't exist? Clone it!
  e_header "Downloading dotfiles"
  git clone --recursive git://github.com/lonnen/dotfiles.git $DOTFILES
  cd $DOTFILES || exit 1
elif [[ "$1" != "restart" ]]; then
  # Make sure we have the latest files.
  e_header "Updating dotfiles"
  cd $DOTFILES || exit 1
  prev_head="$(git rev-parse HEAD)"
  git pull --ff-only
  git submodule update --init --recursive --quiet
  if [[ "$(git rev-parse HEAD)" != "$prev_head" ]]; then
    e_header "Changes detected, restarting script"
    exec "$0" "restart"
  fi
fi

# Add binaries into the path
[[ -d $DOTFILES/bin ]] && PATH=$DOTFILES/bin:$PATH
export PATH

# Tweak file globbing.
setopt dotglob
setopt nullglob

# Create caches directory, if it doesn't already exist.
mkdir -p "$DOTFILES/caches/init"

# If backups are needed, this is where they'll go.
backup_dir="$DOTFILES/backups/$(date "+%Y_%m_%d-%H_%M_%S")/"
backup=

# Execute code for each file in these subdirectories.
do_stuff "init"
do_stuff "copy"
do_stuff "link"
do_stuff "link" "private"

# Alert if backups were made.
if [[ "$backup" ]]; then
  echo -e "\nBackups were moved to ~/${backup_dir#$HOME/}"
fi

# Lest I forget to do a few additional things...
if [[ "$new_dotfiles_install" && -e "conf/firsttime_reminder.sh" ]]; then
  e_header "First-Time settings"
  # this may be overriden by a git config sync'd from "private" or "source"
  git config --global core.editor "code --wait"

  e_header "First-Time Reminders"
  source "conf/firsttime_reminder.sh"
fi

# All done!
e_header "All done!"
